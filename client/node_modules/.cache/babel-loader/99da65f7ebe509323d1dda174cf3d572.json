{"ast":null,"code":"import axios from \"axios\";\nimport { SET_DESIGN_COLOR, SET_DESIGN_FONT, TOGGLE_MODAL, SET_FONT_SIZE, SET_FONT_ROTATION, SET_FONT_WEIGHT, SET_LINE_HEIGHT, SET_TEXT_COLOR } from \"./types\";\nexport const toggleModal = modalInfo => {\n  return {\n    type: TOGGLE_MODAL,\n    payload: modalInfo\n  };\n};\nexport const saveColor = (name, color) => {\n  var obj = {};\n  obj[name] = color;\n  return {\n    type: SET_DESIGN_COLOR,\n    payload: obj\n  };\n};\nexport const addText = (name, text) => {\n  var obj = {};\n  obj[name] = text;\n  return {\n    type: SET_DESIGN_FONT,\n    payload: text\n  };\n};\nexport const setFontSize = size => {\n  return {\n    type: SET_FONT_SIZE,\n    payload: size\n  };\n};\nexport const setFontRotation = size => {\n  return {\n    type: SET_FONT_ROTATION,\n    payload: size\n  };\n};\nexport const setFontWeight = size => {\n  return {\n    type: SET_FONT_WEIGHT,\n    payload: size\n  };\n};\nexport const setLineHeight = size => {\n  return {\n    type: SET_LINE_HEIGHT,\n    payload: size\n  };\n};\nexport const textColor = color => {\n  console.log(color);\n  return {\n    type: SET_TEXT_COLOR,\n    payload: color\n  };\n};\nexport const quoteRequest = messageData => {\n  axios.post(\"/api/mailer/send\", messageData).then(response => {\n    if (response.data.msg === \"success\") {\n      alert(\"Message Sent.\"); //this.resetForm();\n    } else if (response.data.msg === \"fail\") {\n      alert(\"Message failed to send.\");\n    }\n  });\n};","map":{"version":3,"sources":["/home/mdehaan51/highrev-projects/merch-designer/client/src/actions/designActions.js"],"names":["axios","SET_DESIGN_COLOR","SET_DESIGN_FONT","TOGGLE_MODAL","SET_FONT_SIZE","SET_FONT_ROTATION","SET_FONT_WEIGHT","SET_LINE_HEIGHT","SET_TEXT_COLOR","toggleModal","modalInfo","type","payload","saveColor","name","color","obj","addText","text","setFontSize","size","setFontRotation","setFontWeight","setLineHeight","textColor","console","log","quoteRequest","messageData","post","then","response","data","msg","alert"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACCC,gBADD,EAECC,eAFD,EAGCC,YAHD,EAICC,aAJD,EAKCC,iBALD,EAMCC,eAND,EAOCC,eAPD,EAQCC,cARD,QASO,SATP;AAWA,OAAO,MAAMC,WAAW,GAAGC,SAAS,IAAI;AACvC,SAAO;AACNC,IAAAA,IAAI,EAAER,YADA;AAENS,IAAAA,OAAO,EAAEF;AAFH,GAAP;AAIA,CALM;AAOP,OAAO,MAAMG,SAAS,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzC,MAAIC,GAAG,GAAG,EAAV;AACAA,EAAAA,GAAG,CAACF,IAAD,CAAH,GAAYC,KAAZ;AACA,SAAO;AACNJ,IAAAA,IAAI,EAAEV,gBADA;AAENW,IAAAA,OAAO,EAAEI;AAFH,GAAP;AAIA,CAPM;AASP,OAAO,MAAMC,OAAO,GAAG,CAACH,IAAD,EAAOI,IAAP,KAAgB;AACtC,MAAIF,GAAG,GAAG,EAAV;AACAA,EAAAA,GAAG,CAACF,IAAD,CAAH,GAAYI,IAAZ;AACA,SAAO;AACNP,IAAAA,IAAI,EAAET,eADA;AAENU,IAAAA,OAAO,EAAEM;AAFH,GAAP;AAIA,CAPM;AASP,OAAO,MAAMC,WAAW,GAAGC,IAAI,IAAI;AAClC,SAAO;AACNT,IAAAA,IAAI,EAAEP,aADA;AAENQ,IAAAA,OAAO,EAAEQ;AAFH,GAAP;AAIA,CALM;AAOP,OAAO,MAAMC,eAAe,GAAGD,IAAI,IAAI;AACtC,SAAO;AACNT,IAAAA,IAAI,EAAEN,iBADA;AAENO,IAAAA,OAAO,EAAEQ;AAFH,GAAP;AAIA,CALM;AAOP,OAAO,MAAME,aAAa,GAAGF,IAAI,IAAI;AACpC,SAAO;AACNT,IAAAA,IAAI,EAAEL,eADA;AAENM,IAAAA,OAAO,EAAEQ;AAFH,GAAP;AAIA,CALM;AAOP,OAAO,MAAMG,aAAa,GAAGH,IAAI,IAAI;AACpC,SAAO;AACNT,IAAAA,IAAI,EAAEJ,eADA;AAENK,IAAAA,OAAO,EAAEQ;AAFH,GAAP;AAIA,CALM;AAOP,OAAO,MAAMI,SAAS,GAAGT,KAAK,IAAI;AACjCU,EAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACA,SAAO;AACNJ,IAAAA,IAAI,EAAEH,cADA;AAENI,IAAAA,OAAO,EAAEG;AAFH,GAAP;AAIA,CANM;AAQP,OAAO,MAAMY,YAAY,GAAGC,WAAW,IAAI;AAC1C5B,EAAAA,KAAK,CAAC6B,IAAN,CAAW,kBAAX,EAA+BD,WAA/B,EAA4CE,IAA5C,CAAiDC,QAAQ,IAAI;AAC5D,QAAIA,QAAQ,CAACC,IAAT,CAAcC,GAAd,KAAsB,SAA1B,EAAqC;AACpCC,MAAAA,KAAK,CAAC,eAAD,CAAL,CADoC,CAEpC;AACA,KAHD,MAGO,IAAIH,QAAQ,CAACC,IAAT,CAAcC,GAAd,KAAsB,MAA1B,EAAkC;AACxCC,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACA;AACD,GAPD;AAQA,CATM","sourcesContent":["import axios from \"axios\";\nimport {\n\tSET_DESIGN_COLOR,\n\tSET_DESIGN_FONT,\n\tTOGGLE_MODAL,\n\tSET_FONT_SIZE,\n\tSET_FONT_ROTATION,\n\tSET_FONT_WEIGHT,\n\tSET_LINE_HEIGHT,\n\tSET_TEXT_COLOR\n} from \"./types\";\n\nexport const toggleModal = modalInfo => {\n\treturn {\n\t\ttype: TOGGLE_MODAL,\n\t\tpayload: modalInfo\n\t};\n};\n\nexport const saveColor = (name, color) => {\n\tvar obj = {};\n\tobj[name] = color;\n\treturn {\n\t\ttype: SET_DESIGN_COLOR,\n\t\tpayload: obj\n\t};\n};\n\nexport const addText = (name, text) => {\n\tvar obj = {};\n\tobj[name] = text;\n\treturn {\n\t\ttype: SET_DESIGN_FONT,\n\t\tpayload: text\n\t};\n};\n\nexport const setFontSize = size => {\n\treturn {\n\t\ttype: SET_FONT_SIZE,\n\t\tpayload: size\n\t};\n};\n\nexport const setFontRotation = size => {\n\treturn {\n\t\ttype: SET_FONT_ROTATION,\n\t\tpayload: size\n\t};\n};\n\nexport const setFontWeight = size => {\n\treturn {\n\t\ttype: SET_FONT_WEIGHT,\n\t\tpayload: size\n\t};\n};\n\nexport const setLineHeight = size => {\n\treturn {\n\t\ttype: SET_LINE_HEIGHT,\n\t\tpayload: size\n\t};\n};\n\nexport const textColor = color => {\n\tconsole.log(color);\n\treturn {\n\t\ttype: SET_TEXT_COLOR,\n\t\tpayload: color\n\t};\n};\n\nexport const quoteRequest = messageData => {\n\taxios.post(\"/api/mailer/send\", messageData).then(response => {\n\t\tif (response.data.msg === \"success\") {\n\t\t\talert(\"Message Sent.\");\n\t\t\t//this.resetForm();\n\t\t} else if (response.data.msg === \"fail\") {\n\t\t\talert(\"Message failed to send.\");\n\t\t}\n\t});\n};\n"]},"metadata":{},"sourceType":"module"}