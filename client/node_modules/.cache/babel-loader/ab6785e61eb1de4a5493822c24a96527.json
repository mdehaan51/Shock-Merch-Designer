{"ast":null,"code":"var _jsxFileName = \"/home/mdehaan51/highrev-projects/merch-designer/client/src/components/DrawingComponents/TopPreview.js\";\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Portal from \"./Portal\";\nimport { Stage, Layer, Rect, Text, Image } from \"react-konva\";\nimport Konva from \"konva\";\nimport SockImage from \"./SockImage\";\nimport SockImage2 from \"./SockImage2\";\nimport { Socks } from \"./constants\";\nimport TextElement from \"./TextElement\";\nimport { addTextNode } from \"./TextNode\";\nimport ImageElement from \"./ImageElement\";\nimport { updateText, selectText, updateImages } from \"../../actions/topActions\";\nimport { connect } from \"react-redux\";\n\nclass TopPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedShape: \"\"\n    };\n  }\n\n  render() {\n    // Stage is a div container\n    // Layer is actual canvas element (so you may have several canvases in the stage)\n    // And then we have canvas shapes inside the Layer\n    let primary = this.props.drawing.primary;\n    let secondary = this.props.drawing.secondary;\n    const topText = this.props.top.text;\n    const imageList = this.props.top.images;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"primary-color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(Stage, {\n      width: 600,\n      height: 750,\n      onMouseDown: e => {\n        // deselect when clicked on empty area\n        const clickedOnEmpty = e.target === e.target.getStage();\n        console.log(e.target.getStage());\n\n        if (clickedOnEmpty) {\n          this.setState({\n            selectedShape: null\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(SockImage2, {\n      blue: primary.blue,\n      red: primary.red,\n      green: primary.green,\n      width: 750,\n      height: 600,\n      src: \"images/sockfrontview.png\",\n      shadowBlur: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(SockImage2, {\n      blue: secondary.blue,\n      red: secondary.red,\n      green: secondary.green,\n      width: 750,\n      height: 600,\n      src: \"images/sockfrontviewTOE.png\",\n      shadowBlur: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), topText.map((data, id) => {\n      return React.createElement(TextElement, {\n        key: id,\n        rotation: data.rotation,\n        x: data.x,\n        y: data.y,\n        text: data.text,\n        id: data.id,\n        textProps: data,\n        isSelected: data.id === this.state.selectedShape,\n        onSelect: () => {\n          this.setState({\n            selectedShape: data.id\n          });\n          this.props.selectText(data.id);\n          /*let id = data.id;\n          let items = this.props.drawing\n          \t.sideText;\n          console.log(items);\n          let textItem = items.filter(obj => {\n          \treturn obj.id === id;\n          });\n          console.log(textItem);\n          console.log(id);\n          let index = items.findIndex(\n          \tobj => obj.id === id\n          );\n          console.log(items);\n          items.splice(index, 1);\n          console.log(items);\n          items.push(textItem[0]);\n          console.log(items);\n          this.props.updateSideText(items);\n          /*let textItems = this.props.drawing\n          \t.sideText;\n          let textDetails = textItems.filter(\n          \tobj => {\n          \t\treturn obj.id === data.id;\n          \t}\n          );\n          this.props.selectText(textDetails);*/\n        },\n        onChange: newAttrs => {\n          const inputs = this.props.side.text.slice();\n          inputs[id] = newAttrs;\n          this.props.updateText(inputs);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      });\n    }), imageList.map((data, id) => {\n      console.log(data);\n      return React.createElement(ImageElement, {\n        key: id,\n        url: data.src,\n        shapeProps: data,\n        x: data.x,\n        y: data.y,\n        isSelected: data.id === this.state.selectedShape,\n        onSelect: () => {\n          this.setState({\n            selectedShape: data.id\n          });\n          /*let id = this.state.selectedShape;\n          let inputShapes = this.state.inputShapes.slice();\n          let item = inputShapes.find(\n          \ti => i.id === id\n          );\n          let index = inputShapes.indexOf(\n          \titem\n          );\n          inputShapes.splice(index, 1);\n          inputShapes.push(item);\n          this.setState({\n          \tinputShapes\n          });*/\n        },\n        onChange: newAttrs => {\n          const inputs = this.props.side.images.slice();\n          console.log(inputs);\n          console.log(newAttrs);\n          inputs[id] = newAttrs;\n          this.props.updateImages(inputs);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      });\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  drawing: state.drawing,\n  top: state.top\n});\n\nexport default connect(mapStateToProps)(TopPreview);","map":{"version":3,"sources":["/home/mdehaan51/highrev-projects/merch-designer/client/src/components/DrawingComponents/TopPreview.js"],"names":["React","Component","render","Portal","Stage","Layer","Rect","Text","Image","Konva","SockImage","SockImage2","Socks","TextElement","addTextNode","ImageElement","updateText","selectText","updateImages","connect","TopPreview","constructor","props","state","selectedShape","primary","drawing","secondary","topText","top","text","imageList","images","e","clickedOnEmpty","target","getStage","console","log","setState","blue","red","green","map","data","id","rotation","x","y","newAttrs","inputs","side","slice","src","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Portal from \"./Portal\";\nimport { Stage, Layer, Rect, Text, Image } from \"react-konva\";\nimport Konva from \"konva\";\n\nimport SockImage from \"./SockImage\";\n\nimport SockImage2 from \"./SockImage2\";\nimport { Socks } from \"./constants\";\nimport TextElement from \"./TextElement\";\nimport { addTextNode } from \"./TextNode\";\nimport ImageElement from \"./ImageElement\";\n\nimport { updateText, selectText, updateImages } from \"../../actions/topActions\";\n\nimport { connect } from \"react-redux\";\n\nclass TopPreview extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tselectedShape: \"\"\n\t\t};\n\t}\n\n\trender() {\n\t\t// Stage is a div container\n\t\t// Layer is actual canvas element (so you may have several canvases in the stage)\n\t\t// And then we have canvas shapes inside the Layer\n\t\tlet primary = this.props.drawing.primary;\n\t\tlet secondary = this.props.drawing.secondary;\n\t\tconst topText = this.props.top.text;\n\t\tconst imageList = this.props.top.images;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"primary-color\">\n\t\t\t\t\t<Stage\n\t\t\t\t\t\twidth={600}\n\t\t\t\t\t\theight={750}\n\t\t\t\t\t\tonMouseDown={e => {\n\t\t\t\t\t\t\t// deselect when clicked on empty area\n\t\t\t\t\t\t\tconst clickedOnEmpty =\n\t\t\t\t\t\t\t\te.target === e.target.getStage();\n\t\t\t\t\t\t\tconsole.log(e.target.getStage());\n\t\t\t\t\t\t\tif (clickedOnEmpty) {\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedShape: null\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Layer>\n\t\t\t\t\t\t\t{/*<Portal>*/}\n\n\t\t\t\t\t\t\t{/*<Portal>*/}\n\t\t\t\t\t\t\t<SockImage2\n\t\t\t\t\t\t\t\tblue={primary.blue}\n\t\t\t\t\t\t\t\tred={primary.red}\n\t\t\t\t\t\t\t\tgreen={primary.green}\n\t\t\t\t\t\t\t\twidth={750}\n\t\t\t\t\t\t\t\theight={600}\n\t\t\t\t\t\t\t\tsrc=\"images/sockfrontview.png\"\n\t\t\t\t\t\t\t\tshadowBlur={10}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<SockImage2\n\t\t\t\t\t\t\t\tblue={secondary.blue}\n\t\t\t\t\t\t\t\tred={secondary.red}\n\t\t\t\t\t\t\t\tgreen={secondary.green}\n\t\t\t\t\t\t\t\twidth={750}\n\t\t\t\t\t\t\t\theight={600}\n\t\t\t\t\t\t\t\tsrc=\"images/sockfrontviewTOE.png\"\n\t\t\t\t\t\t\t\tshadowBlur={0}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t{topText.map((data, id) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TextElement\n\t\t\t\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t\t\t\trotation={data.rotation}\n\t\t\t\t\t\t\t\t\t\tx={data.x}\n\t\t\t\t\t\t\t\t\t\ty={data.y}\n\t\t\t\t\t\t\t\t\t\ttext={data.text}\n\t\t\t\t\t\t\t\t\t\tid={data.id}\n\t\t\t\t\t\t\t\t\t\ttextProps={data}\n\t\t\t\t\t\t\t\t\t\tisSelected={\n\t\t\t\t\t\t\t\t\t\t\tdata.id === this.state.selectedShape\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tonSelect={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tselectedShape: data.id\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tthis.props.selectText(data.id);\n\t\t\t\t\t\t\t\t\t\t\t/*let id = data.id;\n\t\t\t\t\t\t\t\t\t\t\tlet items = this.props.drawing\n\t\t\t\t\t\t\t\t\t\t\t\t.sideText;\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(items);\n\t\t\t\t\t\t\t\t\t\t\tlet textItem = items.filter(obj => {\n\t\t\t\t\t\t\t\t\t\t\t\treturn obj.id === id;\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(textItem);\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(id);\n\t\t\t\t\t\t\t\t\t\t\tlet index = items.findIndex(\n\t\t\t\t\t\t\t\t\t\t\t\tobj => obj.id === id\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(items);\n\t\t\t\t\t\t\t\t\t\t\titems.splice(index, 1);\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(items);\n\t\t\t\t\t\t\t\t\t\t\titems.push(textItem[0]);\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(items);\n\t\t\t\t\t\t\t\t\t\t\tthis.props.updateSideText(items);\n\t\t\t\t\t\t\t\t\t\t\t/*let textItems = this.props.drawing\n\t\t\t\t\t\t\t\t\t\t\t\t.sideText;\n\t\t\t\t\t\t\t\t\t\t\tlet textDetails = textItems.filter(\n\t\t\t\t\t\t\t\t\t\t\t\tobj => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn obj.id === data.id;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tthis.props.selectText(textDetails);*/\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonChange={newAttrs => {\n\t\t\t\t\t\t\t\t\t\t\tconst inputs = this.props.side.text.slice();\n\t\t\t\t\t\t\t\t\t\t\tinputs[id] = newAttrs;\n\t\t\t\t\t\t\t\t\t\t\tthis.props.updateText(inputs);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t{imageList.map((data, id) => {\n\t\t\t\t\t\t\t\tconsole.log(data);\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<ImageElement\n\t\t\t\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t\t\t\turl={data.src}\n\t\t\t\t\t\t\t\t\t\tshapeProps={data}\n\t\t\t\t\t\t\t\t\t\tx={data.x}\n\t\t\t\t\t\t\t\t\t\ty={data.y}\n\t\t\t\t\t\t\t\t\t\tisSelected={\n\t\t\t\t\t\t\t\t\t\t\tdata.id === this.state.selectedShape\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tonSelect={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tselectedShape: data.id\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t/*let id = this.state.selectedShape;\n\t\t\t\t\t\t\t\t\t\t\tlet inputShapes = this.state.inputShapes.slice();\n\t\t\t\t\t\t\t\t\t\t\tlet item = inputShapes.find(\n\t\t\t\t\t\t\t\t\t\t\t\ti => i.id === id\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tlet index = inputShapes.indexOf(\n\t\t\t\t\t\t\t\t\t\t\t\titem\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tinputShapes.splice(index, 1);\n\t\t\t\t\t\t\t\t\t\t\tinputShapes.push(item);\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tinputShapes\n\t\t\t\t\t\t\t\t\t\t\t});*/\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonChange={newAttrs => {\n\t\t\t\t\t\t\t\t\t\t\tconst inputs = this.props.side.images.slice();\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(inputs);\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(newAttrs);\n\t\t\t\t\t\t\t\t\t\t\tinputs[id] = newAttrs;\n\t\t\t\t\t\t\t\t\t\t\tthis.props.updateImages(inputs);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Layer>\n\t\t\t\t\t</Stage>\n\t\t\t\t</div>\n\t\t\t\t{/*<div className=\"secondary-color\">\n\t\t\t\t\t<Stage width={800} height={800}>\n\t\t\t\t\t\t<Layer>\n\t\t\t\t\t\t\t<SockImage\n\t\t\t\t\t\t\t\tblue={color.blue}\n\t\t\t\t\t\t\t\tred={color.red}\n\t\t\t\t\t\t\t\tgreen={color.green}\n\t\t\t\t\t\t\t\tsrc={null}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Layer>\n\t\t\t\t\t</Stage>\n\t\t\t\t</div>*/}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => ({\n\tdrawing: state.drawing,\n\ttop: state.top\n});\n\nexport default connect(mapStateToProps)(TopPreview);\n"]},"metadata":{},"sourceType":"module"}