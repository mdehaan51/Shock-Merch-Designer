{"ast":null,"code":"var _jsxFileName = \"/home/mdehaan51/highrev-projects/merch-designer/client/src/components/DrawingComponents/BottomPreview.js\";\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Portal from \"./Portal\";\nimport { Stage, Layer, Rect, Text, Image } from \"react-konva\";\nimport Konva from \"konva\";\nimport SockImage from \"./SockImage\";\nimport SockImage2 from \"./SockImage2\";\nimport { Socks } from \"./constants\";\nimport SquareElement from \"./TextElement\";\nimport ShapeElement from \"./ShapeElement\";\nimport { addTextNode } from \"./textNode\";\nimport { connect } from \"react-redux\";\n\nclass BottomPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputShapes: [],\n      inputList: [{\n        x: 10,\n        y: 10,\n        width: 100,\n        height: 100,\n        //fill: \"red\",\n        id: \"rect1\"\n      }],\n      selectedShape: \"\"\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.drawing.inputShapes !== this.props.drawing.inputShapes) {\n      let newItem = this.props.drawing.inputShapes.slice(-1)[0];\n      console.log(newItem);\n      this.setState({\n        inputShapes: [...this.state.inputShapes, newItem]\n      });\n    }\n  }\n\n  render() {\n    // Stage is a div container\n    // Layer is actual canvas element (so you may have several canvases in the stage)\n    // And then we have canvas shapes inside the Layer\n    let primary = this.props.drawing.primary;\n    let secondary = this.props.drawing.secondary;\n    let shape = this.props.drawing.shape;\n    let shapeList = this.props.drawing.inputShapes;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"primary-color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Stage, {\n      width: 800,\n      height: 800,\n      onMouseDown: e => {\n        // deselect when clicked on empty area\n        const clickedOnEmpty = e.target === e.target.getStage();\n\n        if (clickedOnEmpty) {\n          this.setState({\n            selectedShape: null\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(SockImage2, {\n      width: 350,\n      height: 699,\n      blue: primary.blue,\n      red: primary.red,\n      green: primary.green,\n      src: \"images/sockbottom.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(SockImage2, {\n      width: 350,\n      height: 699,\n      blue: secondary.blue,\n      red: secondary.red,\n      green: secondary.green,\n      src: \"images/sockbottomheeltoe.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), this.state.inputShapes.map((data, id) => {\n      return React.createElement(ShapeElement, {\n        key: id,\n        url: data.src,\n        blue: shape.blue,\n        red: shape.red,\n        green: shape.green,\n        hex: shape.hex,\n        shapeProps: data,\n        isSelected: data.id === this.state.selectedShape,\n        onSelect: () => {\n          this.setState({\n            selectedShape: data.id\n          });\n          /*let id = this.state.selectedShape;\n          let inputShapes = this.state.inputShapes.slice();\n          let item = inputShapes.find(\n          \ti => i.id === id\n          );\n          let index = inputShapes.indexOf(\n          \titem\n          );\n          inputShapes.splice(index, 1);\n          inputShapes.push(item);\n          this.setState({\n          \tinputShapes\n          });*/\n        },\n        onChange: newAttrs => {\n          const inputs = this.state.inputShapes.slice();\n          inputs[id] = newAttrs;\n          this.setState({\n            inputShapes: inputs\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      });\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  drawing: state.drawing\n});\n\nexport default connect(mapStateToProps)(BottomPreview);","map":{"version":3,"sources":["/home/mdehaan51/highrev-projects/merch-designer/client/src/components/DrawingComponents/BottomPreview.js"],"names":["React","Component","render","Portal","Stage","Layer","Rect","Text","Image","Konva","SockImage","SockImage2","Socks","SquareElement","ShapeElement","addTextNode","connect","BottomPreview","constructor","props","state","inputShapes","inputList","x","y","width","height","id","selectedShape","componentDidUpdate","prevProps","drawing","newItem","slice","console","log","setState","primary","secondary","shape","shapeList","e","clickedOnEmpty","target","getStage","blue","red","green","map","data","src","hex","newAttrs","inputs","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,IAA7B,EAAmCC,KAAnC,QAAgD,aAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,OAAOC,aAAP,MAA0B,eAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,WAAT,QAA4B,YAA5B;AAEA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,aAAN,SAA4BhB,SAA5B,CAAsC;AACrCiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,WAAW,EAAE,EADD;AAEZC,MAAAA,SAAS,EAAE,CACV;AACCC,QAAAA,CAAC,EAAE,EADJ;AAECC,QAAAA,CAAC,EAAE,EAFJ;AAGCC,QAAAA,KAAK,EAAE,GAHR;AAICC,QAAAA,MAAM,EAAE,GAJT;AAKC;AACAC,QAAAA,EAAE,EAAE;AANL,OADU,CAFC;AAYZC,MAAAA,aAAa,EAAE;AAZH,KAAb;AAcA;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC7B,QAAIA,SAAS,CAACC,OAAV,CAAkBV,WAAlB,KAAkC,KAAKF,KAAL,CAAWY,OAAX,CAAmBV,WAAzD,EAAsE;AACrE,UAAIW,OAAO,GAAG,KAAKb,KAAL,CAAWY,OAAX,CAAmBV,WAAnB,CAA+BY,KAA/B,CAAqC,CAAC,CAAtC,EAAyC,CAAzC,CAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,WAAKI,QAAL,CAAc;AACbf,QAAAA,WAAW,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,WAAf,EAA4BW,OAA5B;AADA,OAAd;AAGA;AACD;;AAID9B,EAAAA,MAAM,GAAG;AACR;AACA;AACA;AACA,QAAImC,OAAO,GAAG,KAAKlB,KAAL,CAAWY,OAAX,CAAmBM,OAAjC;AACA,QAAIC,SAAS,GAAG,KAAKnB,KAAL,CAAWY,OAAX,CAAmBO,SAAnC;AACA,QAAIC,KAAK,GAAG,KAAKpB,KAAL,CAAWY,OAAX,CAAmBQ,KAA/B;AACA,QAAIC,SAAS,GAAG,KAAKrB,KAAL,CAAWY,OAAX,CAAmBV,WAAnC;AAEA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,KAAD;AACC,MAAA,KAAK,EAAE,GADR;AAEC,MAAA,MAAM,EAAE,GAFT;AAGC,MAAA,WAAW,EAAEoB,CAAC,IAAI;AACjB;AACA,cAAMC,cAAc,GACnBD,CAAC,CAACE,MAAF,KAAaF,CAAC,CAACE,MAAF,CAASC,QAAT,EADd;;AAGA,YAAIF,cAAJ,EAAoB;AACnB,eAAKN,QAAL,CAAc;AACbR,YAAAA,aAAa,EAAE;AADF,WAAd;AAGA;AACD,OAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAeC,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKC,oBAAC,UAAD;AACC,MAAA,KAAK,EAAE,GADR;AAEC,MAAA,MAAM,EAAE,GAFT;AAGC,MAAA,IAAI,EAAES,OAAO,CAACQ,IAHf;AAIC,MAAA,GAAG,EAAER,OAAO,CAACS,GAJd;AAKC,MAAA,KAAK,EAAET,OAAO,CAACU,KALhB;AAMC,MAAA,GAAG,EAAC,uBANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALD,EAaC,oBAAC,UAAD;AACC,MAAA,KAAK,EAAE,GADR;AAEC,MAAA,MAAM,EAAE,GAFT;AAGC,MAAA,IAAI,EAAET,SAAS,CAACO,IAHjB;AAIC,MAAA,GAAG,EAAEP,SAAS,CAACQ,GAJhB;AAKC,MAAA,KAAK,EAAER,SAAS,CAACS,KALlB;AAMC,MAAA,GAAG,EAAC,8BANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbD,EAqBE,KAAK3B,KAAL,CAAWC,WAAX,CAAuB2B,GAAvB,CAA2B,CAACC,IAAD,EAAOtB,EAAP,KAAc;AACzC,aACC,oBAAC,YAAD;AACC,QAAA,GAAG,EAAEA,EADN;AAEC,QAAA,GAAG,EAAEsB,IAAI,CAACC,GAFX;AAGC,QAAA,IAAI,EAAEX,KAAK,CAACM,IAHb;AAIC,QAAA,GAAG,EAAEN,KAAK,CAACO,GAJZ;AAKC,QAAA,KAAK,EAAEP,KAAK,CAACQ,KALd;AAMC,QAAA,GAAG,EAAER,KAAK,CAACY,GANZ;AAOC,QAAA,UAAU,EAAEF,IAPb;AAQC,QAAA,UAAU,EACTA,IAAI,CAACtB,EAAL,KAAY,KAAKP,KAAL,CAAWQ,aATzB;AAWC,QAAA,QAAQ,EAAE,MAAM;AACf,eAAKQ,QAAL,CAAc;AACbR,YAAAA,aAAa,EAAEqB,IAAI,CAACtB;AADP,WAAd;AAGA;;;;;;;;;;;;;AAaA,SA5BF;AA6BC,QAAA,QAAQ,EAAEyB,QAAQ,IAAI;AACrB,gBAAMC,MAAM,GAAG,KAAKjC,KAAL,CAAWC,WAAX,CAAuBY,KAAvB,EAAf;AACAoB,UAAAA,MAAM,CAAC1B,EAAD,CAAN,GAAayB,QAAb;AACA,eAAKhB,QAAL,CAAc;AACbf,YAAAA,WAAW,EAAEgC;AADA,WAAd;AAGA,SAnCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD;AAuCA,KAxCA,CArBF,CAfD,CADD,CADD,CADD;AAiGA;;AAzIoC;;AA4ItC,MAAMC,eAAe,GAAGlC,KAAK,KAAK;AACjCW,EAAAA,OAAO,EAAEX,KAAK,CAACW;AADkB,CAAL,CAA7B;;AAIA,eAAef,OAAO,CAACsC,eAAD,CAAP,CAAyBrC,aAAzB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Portal from \"./Portal\";\nimport { Stage, Layer, Rect, Text, Image } from \"react-konva\";\nimport Konva from \"konva\";\n\nimport SockImage from \"./SockImage\";\nimport SockImage2 from \"./SockImage2\";\nimport { Socks } from \"./constants\";\nimport SquareElement from \"./TextElement\";\nimport ShapeElement from \"./ShapeElement\";\nimport { addTextNode } from \"./textNode\";\n\nimport { connect } from \"react-redux\";\n\nclass BottomPreview extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinputShapes: [],\n\t\t\tinputList: [\n\t\t\t\t{\n\t\t\t\t\tx: 10,\n\t\t\t\t\ty: 10,\n\t\t\t\t\twidth: 100,\n\t\t\t\t\theight: 100,\n\t\t\t\t\t//fill: \"red\",\n\t\t\t\t\tid: \"rect1\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tselectedShape: \"\"\n\t\t};\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.drawing.inputShapes !== this.props.drawing.inputShapes) {\n\t\t\tlet newItem = this.props.drawing.inputShapes.slice(-1)[0];\n\t\t\tconsole.log(newItem);\n\t\t\tthis.setState({\n\t\t\t\tinputShapes: [...this.state.inputShapes, newItem]\n\t\t\t});\n\t\t}\n\t}\n\n\tonSelect;\n\n\trender() {\n\t\t// Stage is a div container\n\t\t// Layer is actual canvas element (so you may have several canvases in the stage)\n\t\t// And then we have canvas shapes inside the Layer\n\t\tlet primary = this.props.drawing.primary;\n\t\tlet secondary = this.props.drawing.secondary;\n\t\tlet shape = this.props.drawing.shape;\n\t\tlet shapeList = this.props.drawing.inputShapes;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"primary-color\">\n\t\t\t\t\t<Stage\n\t\t\t\t\t\twidth={800}\n\t\t\t\t\t\theight={800}\n\t\t\t\t\t\tonMouseDown={e => {\n\t\t\t\t\t\t\t// deselect when clicked on empty area\n\t\t\t\t\t\t\tconst clickedOnEmpty =\n\t\t\t\t\t\t\t\te.target === e.target.getStage();\n\n\t\t\t\t\t\t\tif (clickedOnEmpty) {\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedShape: null\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Layer>\n\t\t\t\t\t\t\t{/*<Portal>*/}\n\n\t\t\t\t\t\t\t{/*<Portal>*/}\n\n\t\t\t\t\t\t\t<SockImage2\n\t\t\t\t\t\t\t\twidth={350}\n\t\t\t\t\t\t\t\theight={699}\n\t\t\t\t\t\t\t\tblue={primary.blue}\n\t\t\t\t\t\t\t\tred={primary.red}\n\t\t\t\t\t\t\t\tgreen={primary.green}\n\t\t\t\t\t\t\t\tsrc=\"images/sockbottom.png\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<SockImage2\n\t\t\t\t\t\t\t\twidth={350}\n\t\t\t\t\t\t\t\theight={699}\n\t\t\t\t\t\t\t\tblue={secondary.blue}\n\t\t\t\t\t\t\t\tred={secondary.red}\n\t\t\t\t\t\t\t\tgreen={secondary.green}\n\t\t\t\t\t\t\t\tsrc=\"images/sockbottomheeltoe.png\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{this.state.inputShapes.map((data, id) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<ShapeElement\n\t\t\t\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t\t\t\turl={data.src}\n\t\t\t\t\t\t\t\t\t\tblue={shape.blue}\n\t\t\t\t\t\t\t\t\t\tred={shape.red}\n\t\t\t\t\t\t\t\t\t\tgreen={shape.green}\n\t\t\t\t\t\t\t\t\t\thex={shape.hex}\n\t\t\t\t\t\t\t\t\t\tshapeProps={data}\n\t\t\t\t\t\t\t\t\t\tisSelected={\n\t\t\t\t\t\t\t\t\t\t\tdata.id === this.state.selectedShape\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tonSelect={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tselectedShape: data.id\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t/*let id = this.state.selectedShape;\n\t\t\t\t\t\t\t\t\t\t\tlet inputShapes = this.state.inputShapes.slice();\n\t\t\t\t\t\t\t\t\t\t\tlet item = inputShapes.find(\n\t\t\t\t\t\t\t\t\t\t\t\ti => i.id === id\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tlet index = inputShapes.indexOf(\n\t\t\t\t\t\t\t\t\t\t\t\titem\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tinputShapes.splice(index, 1);\n\t\t\t\t\t\t\t\t\t\t\tinputShapes.push(item);\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tinputShapes\n\t\t\t\t\t\t\t\t\t\t\t});*/\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonChange={newAttrs => {\n\t\t\t\t\t\t\t\t\t\t\tconst inputs = this.state.inputShapes.slice();\n\t\t\t\t\t\t\t\t\t\t\tinputs[id] = newAttrs;\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tinputShapes: inputs\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Layer>\n\t\t\t\t\t</Stage>\n\t\t\t\t</div>\n\t\t\t\t{/*<div className=\"secondary-color\">\n\t\t\t\t\t<Stage width={800} height={800}>\n\t\t\t\t\t\t<Layer>\n\t\t\t\t\t\t\t<SockImage\n\t\t\t\t\t\t\t\tblue={color.blue}\n\t\t\t\t\t\t\t\tred={color.red}\n\t\t\t\t\t\t\t\tgreen={color.green}\n\t\t\t\t\t\t\t\tsrc={null}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Layer>\n\t\t\t\t\t</Stage>\n\t\t\t\t</div>*/}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => ({\n\tdrawing: state.drawing\n});\n\nexport default connect(mapStateToProps)(BottomPreview);\n"]},"metadata":{},"sourceType":"module"}