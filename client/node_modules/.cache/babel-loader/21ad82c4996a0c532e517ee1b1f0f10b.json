{"ast":null,"code":"var _jsxFileName = \"/home/mdehaan51/highrev-projects/park-builder/client/src/components/NewGridLayout.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ObjectList from \"./ObjectList.js\";\nimport GridObjectItem from \"./gridObjectItem.js\";\nimport ComponentCounter from \"./ComponentCounter.js\";\nimport Modal from \"./Modal.js\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../actions/authActions\";\nimport { setGridSize, toggleModal } from \"../actions/gridActions\";\nimport html2canvas from \"html2canvas\";\nimport Navbar from \"./NavBar.js\";\nimport \"../styles/App.css\";\n\nclass GridLayout extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      draggedItem: [],\n      addedComponents: [],\n      counter: 0,\n      componentX: 0,\n      componentY: 0,\n      movingComponentId: \"\",\n      gridWidth: 0,\n      gridHeight: 0,\n      scale: 0,\n      activeItem: \"\",\n      gridSize: \"28px 28px\",\n      counterList: \"\"\n    };\n\n    this.findGridSize = () => {\n      console.log(\"finding initial grid\");\n      let screenWidth = this.refs[\"gridContainer\"].offsetWidth;\n      let gridWidth = Math.round(screenWidth * 0.8 / 100) * 100;\n      let screenHeight = this.refs[\"gridContainer\"].offsetWidth;\n      let gridHeight = Math.round(screenHeight * 0.8 / 100) * 100;\n      let scale = gridWidth / this.props.grid.width;\n      this.setState({\n        gridWidth: gridWidth,\n        gridHeight: gridHeight,\n        scale: scale\n      });\n    };\n\n    this.gridIsSquare = (width, height) => {\n      let sideLength;\n      let scale;\n\n      if (width > height) {\n        sideLength = Math.round(height * 0.8 / 100) * 100;\n      } else {\n        sideLength = Math.round(width * 0.8 / 100) * 100;\n      }\n\n      scale = sideLength / this.props.grid.width;\n      this.setState({\n        gridWidth: sideLength,\n        gridHeight: sideLength,\n        scale: scale\n      }, this.setGridSize(sideLength, this.props.grid.width));\n    };\n\n    this.widthIsLarger = (width, height) => {\n      let gridWidth = Math.round(width * 0.8 / 100) * 100;\n      let scale = this.props.grid.width / this.props.grid.height;\n      let gridHeight = gridWidth / scale;\n      this.setState({\n        gridWidth: gridWidth,\n        gridHeight: gridHeight,\n        scale: scale\n      }, this.setGridSize(gridWidth, this.props.grid.width));\n    };\n\n    this.heightIsLarger = (width, height) => {\n      let gridHeight = Math.round(height * 0.8 / 100) * 100;\n      let scale = this.props.grid.height / this.props.grid.width;\n      let gridWidth = gridHeight / scale;\n      this.setState({\n        gridWidth: gridWidth,\n        gridHeight: gridHeight,\n        scale: scale\n      }, this.setGridSize(gridHeight, this.props.grid.height));\n    };\n\n    this.setSize = () => {\n      const dimensions = this.refs[\"gridContainer\"].getBoundingClientRect();\n      let screenWidth = dimensions.width;\n      let screenHeight = dimensions.height;\n\n      if (this.props.grid.width === this.props.grid.height) {\n        this.gridIsSquare(screenWidth, screenHeight);\n      } else if (this.props.grid.width > this.props.grid.height) {\n        this.widthIsLarger(screenWidth, screenHeight);\n      } else if (this.props.grid.width < this.props.grid.height) {\n        this.heightIsLarger(screenWidth, screenHeight);\n      }\n    };\n\n    this.onDragOver = ev => {\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n\n    this.onDrop = ev => {\n      ev.preventDefault();\n      let draggedItem = this.state.draggedItem;\n      let gridCoords = ReactDOM.findDOMNode(this.refs[\"gridBox\"]).getBoundingClientRect();\n      console.log(gridCoords);\n      this.getItemCoords(gridCoords.x, gridCoords.y, ev.clientX, ev.clientY);\n\n      if (draggedItem.length === 0) {\n        return; //preventing 'invisible' elements being added\n      } else {\n        this.setState({\n          counter: this.state.counter + 1,\n          draggedItem: [],\n          addedComponents: [...this.state.addedComponents, draggedItem]\n        });\n      }\n    };\n\n    this.getItemCoords = (gridX, gridY, itemX, itemY) => {\n      console.log(gridX);\n      console.log(gridY);\n      console.log(itemX);\n      console.log(itemY);\n      this.setState({\n        componentX: itemX - gridX,\n        componentY: itemY - gridY\n      });\n    };\n\n    this.itemIsDragging = (id, name, img, width, length) => {\n      let pieceId = this.state.counter;\n      let rotation = 0;\n      this.setState({\n        draggedItem: {\n          pieceId,\n          name,\n          img,\n          length,\n          width,\n          rotation\n        }\n      });\n    };\n\n    this.itemIsDropped = (evt, id, img, width, length) => {//console.log(evt.clientX);\n    };\n\n    this.saveLocation = (left, top, right, bottom) => {//console.log(left, top, right, bottom);\n    };\n\n    this.saveItems = (id, img, width, length, rotation) => {\n      this.setState({\n        addedComponents: [...this.state.components, [id, img, length, width, rotation]]\n      });\n    };\n\n    this.onDragStart = (ev, id) => {\n      this.setState({\n        movingComponentId: id\n      });\n    };\n\n    this.deleteComponent = id => {\n      let toBeDeleted = id;\n      let filteredItems = this.state.addedComponents.filter(function (e) {\n        return e.pieceId !== toBeDeleted;\n      });\n      this.setState({\n        addedComponents: filteredItems\n      });\n    };\n\n    this.rotateComponent = () => {\n      let toBeRotated = this.state.movingComponentId;\n      let allComponents = this.state.addedComponents;\n      let currentRotation = allComponents.find(e => {\n        return e.pieceId === toBeRotated;\n      });\n      let newRotation = currentRotation.rotation < 360 ? currentRotation.rotation + 90 : 0;\n      Object.assign(allComponents.find(e => e.pieceId === toBeRotated), {\n        rotation: newRotation\n      });\n    };\n\n    this.removeItem = name => {};\n\n    this.saveActiveItem = id => {\n      console.log(this.state.activeItem);\n      this.setState({\n        activeItem: id\n      });\n    };\n\n    this.setGridSize = (gridSize, inputSize) => {\n      let backgroundGridSize = gridSize / (inputSize / 10);\n      console.log(gridSize);\n      console.log(inputSize);\n      this.setState({\n        gridSize: \"\".concat(backgroundGridSize, \"px \").concat(backgroundGridSize, \"px\")\n      });\n    };\n\n    this.onLogoutClick = e => {\n      e.preventDefault();\n      this.props.logoutUser();\n    };\n\n    this.hideModal = e => {\n      e.preventDefault();\n      const modal = {\n        active: false,\n        type: \"\",\n        title: \"\"\n      };\n      this.props.toggleModal(modal);\n    };\n\n    this.saveList = items => {\n      this.setState({\n        counterList: items\n      });\n    };\n  }\n\n  componentDidMount() {\n    //this.setGridSize();\n    this.findGridSize();\n    this.setSize();\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(prevProps);\n\n    if (prevProps.grid.width !== this.props.grid.width || prevProps.grid.height !== this.props.grid.height) {\n      this.setSize(); //this.setGridSize();\n    }\n  }\n\n  render() {\n    let size = {\n      width: this.state.gridWidth,\n      height: this.state.gridHeight,\n      backgroundSize: this.state.gridSize\n    };\n    /*let width = this.props.grid.dimensions.width;\n    let height = this.props.grid.dimensions.height;*/\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      setSize: this.setSize,\n      request: this.showRequestModal,\n      help: this.showHelpModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      show: this.props.grid.modal.active,\n      handleClose: this.hideModal,\n      title: this.props.grid.modal.title,\n      type: this.props.grid.modal.type,\n      components: this.state.counterList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"builder-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"\",\n      className: \"container-background\",\n      src: \"images/background.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      onClick: this.onLogoutClick,\n      className: \"logout-button \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"Logout\"), React.createElement(ObjectList, {\n      saveLocation: this.saveLocation,\n      itemIsDragging: this.itemIsDragging,\n      saveItems: this.saveItems,\n      itemIsDropped: this.itemIsDropped,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"capture\",\n      className: \"grid-container\",\n      ref: \"gridContainer\" //onDrop={e => this.onDrop(e, \"complete\")}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"grid-box\",\n      ref: \"gridBox\",\n      style: size,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"width-distance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, this.props.grid.width, \" ft\"), React.createElement(\"div\", {\n      className: \"height-distance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, this.props.grid.height, \" ft\"), React.createElement(\"div\", {\n      className: \"grid\",\n      style: size,\n      onDragOver: e => this.onDragOver(e),\n      onDrop: e => this.onDrop(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, this.state.addedComponents.map((items, id) => {\n      /*let width =\n      \t(items.width / this.props.grid.width) *\n      \tthis.state.gridWidth;\n      console.log(width);*/\n      //on to something. SAVE\n      return React.createElement(GridObjectItem, {\n        key: id,\n        pieceId: items.pieceId,\n        img: items.img,\n        width: items.width,\n        height: items.length,\n        onDragStart: this.onDragStart,\n        gridWidth: this.state.gridWidth,\n        gridHeight: this.state.gridHeight,\n        saveLocation: this.saveLocation,\n        xLocation: this.state.componentX,\n        yLocation: this.state.componentY,\n        rotate: items.rotation,\n        scale: this.state.scale,\n        saveActiveItem: this.saveActiveItem,\n        currentlyActive: this.state.activeItem,\n        deleteComponent: this.deleteComponent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      });\n    })))), React.createElement(ComponentCounter, {\n      addedComponents: this.state.addedComponents,\n      saveList: this.saveList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  grid: state.grid\n});\n\nexport default connect(mapStateToProps, {\n  logoutUser,\n  toggleModal\n})(GridLayout);","map":{"version":3,"sources":["/home/mdehaan51/highrev-projects/park-builder/client/src/components/NewGridLayout.js"],"names":["React","Component","ReactDOM","ObjectList","GridObjectItem","ComponentCounter","Modal","connect","logoutUser","setGridSize","toggleModal","html2canvas","Navbar","GridLayout","state","draggedItem","addedComponents","counter","componentX","componentY","movingComponentId","gridWidth","gridHeight","scale","activeItem","gridSize","counterList","findGridSize","console","log","screenWidth","refs","offsetWidth","Math","round","screenHeight","props","grid","width","setState","gridIsSquare","height","sideLength","widthIsLarger","heightIsLarger","setSize","dimensions","getBoundingClientRect","onDragOver","ev","stopPropagation","preventDefault","onDrop","gridCoords","findDOMNode","getItemCoords","x","y","clientX","clientY","length","gridX","gridY","itemX","itemY","itemIsDragging","id","name","img","pieceId","rotation","itemIsDropped","evt","saveLocation","left","top","right","bottom","saveItems","components","onDragStart","deleteComponent","toBeDeleted","filteredItems","filter","e","rotateComponent","toBeRotated","allComponents","currentRotation","find","newRotation","Object","assign","removeItem","saveActiveItem","inputSize","backgroundGridSize","onLogoutClick","hideModal","modal","active","type","title","saveList","items","componentDidMount","componentDidUpdate","prevProps","render","size","backgroundSize","showRequestModal","showHelpModal","map","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ObjectList from \"./ObjectList.js\";\nimport GridObjectItem from \"./gridObjectItem.js\";\nimport ComponentCounter from \"./ComponentCounter.js\";\nimport Modal from \"./Modal.js\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../actions/authActions\";\nimport { setGridSize, toggleModal } from \"../actions/gridActions\";\nimport html2canvas from \"html2canvas\";\nimport Navbar from \"./NavBar.js\";\nimport \"../styles/App.css\";\n\nclass GridLayout extends Component {\n\tstate = {\n\t\tdraggedItem: [],\n\t\taddedComponents: [],\n\t\tcounter: 0,\n\t\tcomponentX: 0,\n\t\tcomponentY: 0,\n\t\tmovingComponentId: \"\",\n\t\tgridWidth: 0,\n\t\tgridHeight: 0,\n\t\tscale: 0,\n\t\tactiveItem: \"\",\n\t\tgridSize: \"28px 28px\",\n\t\tcounterList: \"\"\n\t};\n\n\tcomponentDidMount() {\n\t\t//this.setGridSize();\n\t\tthis.findGridSize();\n\t\tthis.setSize();\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconsole.log(prevProps);\n\t\tif (\n\t\t\tprevProps.grid.width !== this.props.grid.width ||\n\t\t\tprevProps.grid.height !== this.props.grid.height\n\t\t) {\n\t\t\tthis.setSize();\n\t\t\t//this.setGridSize();\n\t\t}\n\t}\n\n\tfindGridSize = () => {\n\t\tconsole.log(\"finding initial grid\");\n\t\tlet screenWidth = this.refs[\"gridContainer\"].offsetWidth;\n\t\tlet gridWidth = Math.round((screenWidth * 0.8) / 100) * 100;\n\t\tlet screenHeight = this.refs[\"gridContainer\"].offsetWidth;\n\t\tlet gridHeight = Math.round((screenHeight * 0.8) / 100) * 100;\n\t\tlet scale = gridWidth / this.props.grid.width;\n\t\tthis.setState({\n\t\t\tgridWidth: gridWidth,\n\t\t\tgridHeight: gridHeight,\n\t\t\tscale: scale\n\t\t});\n\t};\n\n\tgridIsSquare = (width, height) => {\n\t\tlet sideLength;\n\t\tlet scale;\n\t\tif (width > height) {\n\t\t\tsideLength = Math.round((height * 0.8) / 100) * 100;\n\t\t} else {\n\t\t\tsideLength = Math.round((width * 0.8) / 100) * 100;\n\t\t}\n\t\tscale = sideLength / this.props.grid.width;\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tgridWidth: sideLength,\n\t\t\t\tgridHeight: sideLength,\n\t\t\t\tscale: scale\n\t\t\t},\n\t\t\tthis.setGridSize(sideLength, this.props.grid.width)\n\t\t);\n\t};\n\n\twidthIsLarger = (width, height) => {\n\t\tlet gridWidth = Math.round((width * 0.8) / 100) * 100;\n\t\tlet scale = this.props.grid.width / this.props.grid.height;\n\t\tlet gridHeight = gridWidth / scale;\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tgridWidth: gridWidth,\n\t\t\t\tgridHeight: gridHeight,\n\t\t\t\tscale: scale\n\t\t\t},\n\t\t\tthis.setGridSize(gridWidth, this.props.grid.width)\n\t\t);\n\t};\n\n\theightIsLarger = (width, height) => {\n\t\tlet gridHeight = Math.round((height * 0.8) / 100) * 100;\n\t\tlet scale = this.props.grid.height / this.props.grid.width;\n\t\tlet gridWidth = gridHeight / scale;\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tgridWidth: gridWidth,\n\t\t\t\tgridHeight: gridHeight,\n\t\t\t\tscale: scale\n\t\t\t},\n\t\t\tthis.setGridSize(gridHeight, this.props.grid.height)\n\t\t);\n\t};\n\n\tsetSize = () => {\n\t\tconst dimensions = this.refs[\"gridContainer\"].getBoundingClientRect();\n\t\tlet screenWidth = dimensions.width;\n\t\tlet screenHeight = dimensions.height;\n\t\tif (this.props.grid.width === this.props.grid.height) {\n\t\t\tthis.gridIsSquare(screenWidth, screenHeight);\n\t\t} else if (this.props.grid.width > this.props.grid.height) {\n\t\t\tthis.widthIsLarger(screenWidth, screenHeight);\n\t\t} else if (this.props.grid.width < this.props.grid.height) {\n\t\t\tthis.heightIsLarger(screenWidth, screenHeight);\n\t\t}\n\t};\n\n\tonDragOver = ev => {\n\t\tev.stopPropagation();\n\t\tev.preventDefault();\n\t};\n\n\tonDrop = ev => {\n\t\tev.preventDefault();\n\t\tlet draggedItem = this.state.draggedItem;\n\t\tlet gridCoords = ReactDOM.findDOMNode(\n\t\t\tthis.refs[\"gridBox\"]\n\t\t).getBoundingClientRect();\n\t\tconsole.log(gridCoords);\n\t\tthis.getItemCoords(gridCoords.x, gridCoords.y, ev.clientX, ev.clientY);\n\t\tif (draggedItem.length === 0) {\n\t\t\treturn; //preventing 'invisible' elements being added\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tcounter: this.state.counter + 1,\n\t\t\t\tdraggedItem: [],\n\t\t\t\taddedComponents: [...this.state.addedComponents, draggedItem]\n\t\t\t});\n\t\t}\n\t};\n\n\tgetItemCoords = (gridX, gridY, itemX, itemY) => {\n\t\tconsole.log(gridX);\n\t\tconsole.log(gridY);\n\t\tconsole.log(itemX);\n\t\tconsole.log(itemY);\n\t\tthis.setState({\n\t\t\tcomponentX: itemX - gridX,\n\t\t\tcomponentY: itemY - gridY\n\t\t});\n\t};\n\n\titemIsDragging = (id, name, img, width, length) => {\n\t\tlet pieceId = this.state.counter;\n\t\tlet rotation = 0;\n\t\tthis.setState({\n\t\t\tdraggedItem: { pieceId, name, img, length, width, rotation }\n\t\t});\n\t};\n\titemIsDropped = (evt, id, img, width, length) => {\n\t\t//console.log(evt.clientX);\n\t};\n\tsaveLocation = (left, top, right, bottom) => {\n\t\t//console.log(left, top, right, bottom);\n\t};\n\n\tsaveItems = (id, img, width, length, rotation) => {\n\t\tthis.setState({\n\t\t\taddedComponents: [\n\t\t\t\t...this.state.components,\n\t\t\t\t[id, img, length, width, rotation]\n\t\t\t]\n\t\t});\n\t};\n\tonDragStart = (ev, id) => {\n\t\tthis.setState({\n\t\t\tmovingComponentId: id\n\t\t});\n\t};\n\tdeleteComponent = id => {\n\t\tlet toBeDeleted = id;\n\t\tlet filteredItems = this.state.addedComponents.filter(function(e) {\n\t\t\treturn e.pieceId !== toBeDeleted;\n\t\t});\n\t\tthis.setState({\n\t\t\taddedComponents: filteredItems\n\t\t});\n\t};\n\n\trotateComponent = () => {\n\t\tlet toBeRotated = this.state.movingComponentId;\n\t\tlet allComponents = this.state.addedComponents;\n\t\tlet currentRotation = allComponents.find(e => {\n\t\t\treturn e.pieceId === toBeRotated;\n\t\t});\n\t\tlet newRotation =\n\t\t\tcurrentRotation.rotation < 360 ? currentRotation.rotation + 90 : 0;\n\t\tObject.assign(allComponents.find(e => e.pieceId === toBeRotated), {\n\t\t\trotation: newRotation\n\t\t});\n\t};\n\n\tremoveItem = name => {};\n\n\tsaveActiveItem = id => {\n\t\tconsole.log(this.state.activeItem);\n\t\tthis.setState({\n\t\t\tactiveItem: id\n\t\t});\n\t};\n\tsetGridSize = (gridSize, inputSize) => {\n\t\tlet backgroundGridSize = gridSize / (inputSize / 10);\n\t\tconsole.log(gridSize);\n\t\tconsole.log(inputSize);\n\t\tthis.setState({\n\t\t\tgridSize: `${backgroundGridSize}px ${backgroundGridSize}px`\n\t\t});\n\t};\n\tonLogoutClick = e => {\n\t\te.preventDefault();\n\t\tthis.props.logoutUser();\n\t};\n\n\thideModal = e => {\n\t\te.preventDefault();\n\t\tconst modal = {\n\t\t\tactive: false,\n\t\t\ttype: \"\",\n\t\t\ttitle: \"\"\n\t\t};\n\t\tthis.props.toggleModal(modal);\n\t};\n\tsaveList = items => {\n\t\tthis.setState({\n\t\t\tcounterList: items\n\t\t});\n\t};\n\n\trender() {\n\t\tlet size = {\n\t\t\twidth: this.state.gridWidth,\n\t\t\theight: this.state.gridHeight,\n\t\t\tbackgroundSize: this.state.gridSize\n\t\t};\n\n\t\t/*let width = this.props.grid.dimensions.width;\n\t\tlet height = this.props.grid.dimensions.height;*/\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Navbar\n\t\t\t\t\tsetSize={this.setSize}\n\t\t\t\t\trequest={this.showRequestModal}\n\t\t\t\t\thelp={this.showHelpModal}\n\t\t\t\t/>\n\t\t\t\t<Modal\n\t\t\t\t\tshow={this.props.grid.modal.active}\n\t\t\t\t\thandleClose={this.hideModal}\n\t\t\t\t\ttitle={this.props.grid.modal.title}\n\t\t\t\t\ttype={this.props.grid.modal.type}\n\t\t\t\t\tcomponents={this.state.counterList}\n\t\t\t\t/>\n\t\t\t\t<div className=\"builder-container\">\n\t\t\t\t\t<img\n\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\tclassName=\"container-background\"\n\t\t\t\t\t\tsrc=\"images/background.jpg\"\n\t\t\t\t\t/>\n\t\t\t\t\t<a onClick={this.onLogoutClick} className=\"logout-button \">\n\t\t\t\t\t\tLogout\n\t\t\t\t\t</a>\n\t\t\t\t\t<ObjectList\n\t\t\t\t\t\tsaveLocation={this.saveLocation}\n\t\t\t\t\t\titemIsDragging={this.itemIsDragging}\n\t\t\t\t\t\tsaveItems={this.saveItems}\n\t\t\t\t\t\titemIsDropped={this.itemIsDropped}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<div\n\t\t\t\t\t\tid=\"capture\"\n\t\t\t\t\t\tclassName=\"grid-container\"\n\t\t\t\t\t\tref=\"gridContainer\"\n\t\t\t\t\t\t//onDrop={e => this.onDrop(e, \"complete\")}\n\t\t\t\t\t>\n\t\t\t\t\t\t{/*<DeleteComponent deleteComponent={this.deleteComponent} />\n\t\t\t\t\t<RotateObject rotateComponent={this.rotateComponent} />*/}\n\t\t\t\t\t\t<div className=\"grid-box\" ref=\"gridBox\" style={size}>\n\t\t\t\t\t\t\t<div className=\"width-distance\">\n\t\t\t\t\t\t\t\t{this.props.grid.width} ft\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"height-distance\">\n\t\t\t\t\t\t\t\t{this.props.grid.height} ft\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"grid\"\n\t\t\t\t\t\t\t\tstyle={size}\n\t\t\t\t\t\t\t\tonDragOver={e => this.onDragOver(e)}\n\t\t\t\t\t\t\t\tonDrop={e => this.onDrop(e)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{this.state.addedComponents.map((items, id) => {\n\t\t\t\t\t\t\t\t\t/*let width =\n\t\t\t\t\t\t\t\t\t\t(items.width / this.props.grid.width) *\n\t\t\t\t\t\t\t\t\t\tthis.state.gridWidth;\n\t\t\t\t\t\t\t\t\tconsole.log(width);*/ //on to something. SAVE\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<GridObjectItem\n\t\t\t\t\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t\t\t\t\tpieceId={items.pieceId}\n\t\t\t\t\t\t\t\t\t\t\timg={items.img}\n\t\t\t\t\t\t\t\t\t\t\twidth={items.width}\n\t\t\t\t\t\t\t\t\t\t\theight={items.length}\n\t\t\t\t\t\t\t\t\t\t\tonDragStart={this.onDragStart}\n\t\t\t\t\t\t\t\t\t\t\tgridWidth={this.state.gridWidth}\n\t\t\t\t\t\t\t\t\t\t\tgridHeight={this.state.gridHeight}\n\t\t\t\t\t\t\t\t\t\t\tsaveLocation={this.saveLocation}\n\t\t\t\t\t\t\t\t\t\t\txLocation={this.state.componentX}\n\t\t\t\t\t\t\t\t\t\t\tyLocation={this.state.componentY}\n\t\t\t\t\t\t\t\t\t\t\trotate={items.rotation}\n\t\t\t\t\t\t\t\t\t\t\tscale={this.state.scale}\n\t\t\t\t\t\t\t\t\t\t\tsaveActiveItem={this.saveActiveItem}\n\t\t\t\t\t\t\t\t\t\t\tcurrentlyActive={\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.activeItem\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tdeleteComponent={\n\t\t\t\t\t\t\t\t\t\t\t\tthis.deleteComponent\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ComponentCounter\n\t\t\t\t\t\taddedComponents={this.state.addedComponents}\n\t\t\t\t\t\tsaveList={this.saveList}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => ({\n\tauth: state.auth,\n\tgrid: state.grid\n});\n\nexport default connect(\n\tmapStateToProps,\n\t{ logoutUser, toggleModal }\n)(GridLayout);\n"]},"metadata":{},"sourceType":"module"}