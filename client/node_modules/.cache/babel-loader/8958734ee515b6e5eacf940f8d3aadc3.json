{"ast":null,"code":"var _jsxFileName = \"/home/mdehaan51/highrev-projects/merch-designer/client/src/components/DrawingComponents/TopPreview.js\";\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Portal from \"./Portal\";\nimport { Stage, Layer, Rect, Text, Image } from \"react-konva\";\nimport Konva from \"konva\";\nimport SockImage from \"./SockImage\";\nimport SockImage2 from \"./SockImage2\";\nimport { Socks } from \"./constants\";\nimport TextElement from \"./TextElement\";\nimport ImageElement from \"./ImageElement\";\nimport { updateText, selectText, updateImages, selectImage } from \"../../actions/topActions\";\nimport { saveData } from \"../../actions/drawingActions\";\nimport { connect } from \"react-redux\";\n\nclass TopPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedShape: \"\",\n      width: null,\n      height: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      width: this.refs.stageContainer.offsetWidth,\n      height: this.refs.stageContainer.offsetHeight\n    });\n  }\n\n  componentWillUnmount() {\n    let sideURL = this.refs.topStage.toDataURL();\n    this.props.saveData(\"top\", sideURL);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.side !== this.props.side) {\n      let sideURL = this.refs.topStage.toDataURL();\n      this.props.saveData(\"top\", sideURL);\n    }\n  }\n\n  render() {\n    // Stage is a div container\n    // Layer is actual canvas element (so you may have several canvases in the stage)\n    // And then we have canvas shapes inside the Layer\n    let primary = this.props.drawing.primary;\n    let secondary = this.props.drawing.secondary;\n    const topText = this.props.top.text;\n    const imageList = this.props.top.images;\n    let scale;\n    let sockWidth = 213;\n    let sockHeight = 600;\n    let xShift = this.state.width / 4;\n\n    if (this.state.width < 857) {\n      sockHeight = this.state.height * 0.9;\n      scale = sockHeight / 600;\n      sockWidth = Math.min(scale * sockWidth);\n      xShift = 10;\n      screenHeight = 375;\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"primary-color\",\n      ref: \"stageContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Stage, {\n      ref: \"topStage\",\n      width: sockWidth * 1.1,\n      height: screenHeight,\n      onMouseDown: e => {\n        // deselect when clicked on empty area\n        const clickedOnEmpty = e.target === e.target.getStage();\n        console.log(e.target.getStage());\n\n        if (clickedOnEmpty) {\n          this.setState({\n            selectedShape: null\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(SockImage2, {\n      x: xShift,\n      blue: primary.blue,\n      red: primary.red,\n      green: primary.green,\n      width: sockWidth,\n      height: sockHeight,\n      src: \"images/sockfrontview.png\",\n      shadowBlur: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(SockImage2, {\n      x: xShift,\n      blue: secondary.blue,\n      red: secondary.red,\n      green: secondary.green,\n      width: sockWidth,\n      height: sockHeight,\n      src: \"images/sockfrontviewTOE.png\",\n      shadowBlur: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), topText.map((data, id) => {\n      return React.createElement(TextElement, {\n        key: id,\n        rotation: data.rotation,\n        x: data.x,\n        y: data.y,\n        text: data.text,\n        id: data.id,\n        textProps: data,\n        isSelected: data.id === this.state.selectedShape,\n        onSelect: () => {\n          this.setState({\n            selectedShape: data.id\n          });\n          this.props.selectText(data.id);\n        },\n        onChange: newAttrs => {\n          const inputs = this.props.top.text.slice();\n          inputs[id] = newAttrs;\n          this.props.updateText(inputs);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      });\n    }), imageList.map((data, id) => {\n      return React.createElement(ImageElement, {\n        key: id,\n        url: data.src,\n        shapeProps: data,\n        x: data.x,\n        y: data.y,\n        isSelected: data.id === this.state.selectedShape,\n        onSelect: () => {\n          this.setState({\n            selectedShape: data.id\n          });\n          this.props.selectImage(data.id);\n        },\n        onChange: newAttrs => {\n          const inputs = this.props.top.images.slice();\n          inputs[id] = newAttrs;\n          this.props.updateImages(inputs);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      });\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  drawing: state.drawing,\n  top: state.top\n});\n\nexport default connect(mapStateToProps, {\n  updateText,\n  selectText,\n  updateImages,\n  selectImage,\n  saveData\n})(TopPreview);","map":{"version":3,"sources":["/home/mdehaan51/highrev-projects/merch-designer/client/src/components/DrawingComponents/TopPreview.js"],"names":["React","Component","render","Portal","Stage","Layer","Rect","Text","Image","Konva","SockImage","SockImage2","Socks","TextElement","ImageElement","updateText","selectText","updateImages","selectImage","saveData","connect","TopPreview","constructor","props","state","selectedShape","width","height","componentDidMount","setState","refs","stageContainer","offsetWidth","offsetHeight","componentWillUnmount","sideURL","topStage","toDataURL","componentDidUpdate","prevProps","side","primary","drawing","secondary","topText","top","text","imageList","images","scale","sockWidth","sockHeight","xShift","Math","min","screenHeight","e","clickedOnEmpty","target","getStage","console","log","blue","red","green","map","data","id","rotation","x","y","newAttrs","inputs","slice","src","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Portal from \"./Portal\";\nimport { Stage, Layer, Rect, Text, Image } from \"react-konva\";\nimport Konva from \"konva\";\n\nimport SockImage from \"./SockImage\";\n\nimport SockImage2 from \"./SockImage2\";\nimport { Socks } from \"./constants\";\nimport TextElement from \"./TextElement\";\nimport ImageElement from \"./ImageElement\";\n\nimport {\n\tupdateText,\n\tselectText,\n\tupdateImages,\n\tselectImage\n} from \"../../actions/topActions\";\n\nimport { saveData } from \"../../actions/drawingActions\";\n\nimport { connect } from \"react-redux\";\n\nclass TopPreview extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tselectedShape: \"\",\n\t\t\twidth: null,\n\t\t\theight: null\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tthis.setState({\n\t\t\twidth: this.refs.stageContainer.offsetWidth,\n\t\t\theight: this.refs.stageContainer.offsetHeight\n\t\t});\n\t}\n\tcomponentWillUnmount() {\n\t\tlet sideURL = this.refs.topStage.toDataURL();\n\t\tthis.props.saveData(\"top\", sideURL);\n\t}\n\tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.side !== this.props.side) {\n\t\t\tlet sideURL = this.refs.topStage.toDataURL();\n\t\t\tthis.props.saveData(\"top\", sideURL);\n\t\t}\n\t}\n\n\trender() {\n\t\t// Stage is a div container\n\t\t// Layer is actual canvas element (so you may have several canvases in the stage)\n\t\t// And then we have canvas shapes inside the Layer\n\t\tlet primary = this.props.drawing.primary;\n\t\tlet secondary = this.props.drawing.secondary;\n\t\tconst topText = this.props.top.text;\n\t\tconst imageList = this.props.top.images;\n\t\tlet scale;\n\t\tlet sockWidth = 213;\n\t\tlet sockHeight = 600;\n\t\tlet xShift = this.state.width / 4;\n\t\tif (this.state.width < 857) {\n\t\t\tsockHeight = this.state.height * 0.9;\n\t\t\tscale = sockHeight / 600;\n\n\t\t\tsockWidth = Math.min(scale * sockWidth);\n\t\t\txShift = 10;\n\t\t\tscreenHeight = 375;\n\t\t}\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"primary-color\" ref=\"stageContainer\">\n\t\t\t\t\t<Stage\n\t\t\t\t\t\tref=\"topStage\"\n\t\t\t\t\t\twidth={sockWidth * 1.1}\n\t\t\t\t\t\theight={screenHeight}\n\t\t\t\t\t\tonMouseDown={e => {\n\t\t\t\t\t\t\t// deselect when clicked on empty area\n\t\t\t\t\t\t\tconst clickedOnEmpty =\n\t\t\t\t\t\t\t\te.target === e.target.getStage();\n\t\t\t\t\t\t\tconsole.log(e.target.getStage());\n\t\t\t\t\t\t\tif (clickedOnEmpty) {\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedShape: null\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Layer>\n\t\t\t\t\t\t\t<SockImage2\n\t\t\t\t\t\t\t\tx={xShift}\n\t\t\t\t\t\t\t\tblue={primary.blue}\n\t\t\t\t\t\t\t\tred={primary.red}\n\t\t\t\t\t\t\t\tgreen={primary.green}\n\t\t\t\t\t\t\t\twidth={sockWidth}\n\t\t\t\t\t\t\t\theight={sockHeight}\n\t\t\t\t\t\t\t\tsrc=\"images/sockfrontview.png\"\n\t\t\t\t\t\t\t\tshadowBlur={10}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<SockImage2\n\t\t\t\t\t\t\t\tx={xShift}\n\t\t\t\t\t\t\t\tblue={secondary.blue}\n\t\t\t\t\t\t\t\tred={secondary.red}\n\t\t\t\t\t\t\t\tgreen={secondary.green}\n\t\t\t\t\t\t\t\twidth={sockWidth}\n\t\t\t\t\t\t\t\theight={sockHeight}\n\t\t\t\t\t\t\t\tsrc=\"images/sockfrontviewTOE.png\"\n\t\t\t\t\t\t\t\tshadowBlur={0}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t{topText.map((data, id) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TextElement\n\t\t\t\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t\t\t\trotation={data.rotation}\n\t\t\t\t\t\t\t\t\t\tx={data.x}\n\t\t\t\t\t\t\t\t\t\ty={data.y}\n\t\t\t\t\t\t\t\t\t\ttext={data.text}\n\t\t\t\t\t\t\t\t\t\tid={data.id}\n\t\t\t\t\t\t\t\t\t\ttextProps={data}\n\t\t\t\t\t\t\t\t\t\tisSelected={\n\t\t\t\t\t\t\t\t\t\t\tdata.id === this.state.selectedShape\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tonSelect={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tselectedShape: data.id\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tthis.props.selectText(data.id);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonChange={newAttrs => {\n\t\t\t\t\t\t\t\t\t\t\tconst inputs = this.props.top.text.slice();\n\t\t\t\t\t\t\t\t\t\t\tinputs[id] = newAttrs;\n\t\t\t\t\t\t\t\t\t\t\tthis.props.updateText(inputs);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t{imageList.map((data, id) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<ImageElement\n\t\t\t\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t\t\t\turl={data.src}\n\t\t\t\t\t\t\t\t\t\tshapeProps={data}\n\t\t\t\t\t\t\t\t\t\tx={data.x}\n\t\t\t\t\t\t\t\t\t\ty={data.y}\n\t\t\t\t\t\t\t\t\t\tisSelected={\n\t\t\t\t\t\t\t\t\t\t\tdata.id === this.state.selectedShape\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tonSelect={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tselectedShape: data.id\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tthis.props.selectImage(data.id);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonChange={newAttrs => {\n\t\t\t\t\t\t\t\t\t\t\tconst inputs = this.props.top.images.slice();\n\n\t\t\t\t\t\t\t\t\t\t\tinputs[id] = newAttrs;\n\t\t\t\t\t\t\t\t\t\t\tthis.props.updateImages(inputs);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Layer>\n\t\t\t\t\t</Stage>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => ({\n\tdrawing: state.drawing,\n\ttop: state.top\n});\n\nexport default connect(\n\tmapStateToProps,\n\t{ updateText, selectText, updateImages, selectImage, saveData }\n)(TopPreview);\n"]},"metadata":{},"sourceType":"module"}