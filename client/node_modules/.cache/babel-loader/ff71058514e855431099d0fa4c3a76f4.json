{"ast":null,"code":"import _slicedToArray from \"/home/mdehaan51/highrev-projects/merch-designer/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mdehaan51/highrev-projects/merch-designer/client/src/components/DesignLayout.js\";\nimport React from \"react\";\nimport GridLayout from \"react-grid-layout\";\nimport ObjectList from \"./ObjectList.js\";\nimport _ from \"lodash\";\n\nclass MyFirstGrid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.saveItems = (l, w, img, gridHeight, gridWidth, parkHeight, parkWidth) => {\n      let width = w;\n      let len = l;\n      this.onAddItem(len, width, img, gridHeight, gridWidth, parkHeight, parkWidth);\n    };\n\n    this.state = {\n      items: [],\n      newCounter: 0,\n      gridHeight: \"\",\n      gridWidth: \"\",\n      width: \"\",\n      height: \"\"\n    };\n    this.onAddItem = this.onAddItem.bind(this);\n    this.onBreakpointChange = this.onBreakpointChange.bind(this);\n  }\n\n  componentDidMount() {\n    var gridHeight = this.gridElement.clientHeight;\n    var gridWidth = this.gridElement.clientWidth;\n    this.setState({\n      gridHeight: gridHeight,\n      gridWidth: gridWidth\n    });\n  }\n\n  calcGridHeight(w, h) {\n    let ratio = \"\";\n    let height = \"\";\n    let width = \"\";\n\n    if (h > w) {\n      console.log(\"w is bigger\");\n      height = this.state.gridHeight * 0.8;\n      ratio = height / h;\n      width = w * ratio;\n    } else if (w > h) {\n      console.log(\"h is bigger\");\n      width = this.state.gridWidth * 0.8;\n      ratio = width / w;\n      height = h * ratio;\n    } else {\n      width = this.state.gridHeight * 0.8;\n      height = this.state.gridHeight * 0.8;\n    }\n\n    return [w, h, width, height];\n  }\n\n  createElement(el) {\n    const removeStyle = {\n      position: \"absolute\",\n      right: \"2px\",\n      top: 0,\n      cursor: \"pointer\"\n    };\n    const i = el.add ? \"+\" : el.i;\n    console.log(el.img);\n    return React.createElement(\"div\", {\n      key: i,\n      \"data-grid\": el,\n      style: {\n        backgroundImage: \"url(\".concat(el.img, \")\"),\n        backgroundSize: \"cover\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    });\n  }\n\n  onAddItem(len, width, img, gridWidth, gridHeight, parkWidth, parkHeight) {\n    let itemWidth = gridWidth / parkWidth * width;\n    console.log(gridWidth);\n    console.log(parkWidth);\n    console.log(width);\n    let itemLength = gridHeight / parkHeight * len;\n    this.setState({\n      items: this.state.items.concat({\n        i: \"n\" + this.state.newCounter,\n        x: 0,\n        y: 0,\n        w: parseInt(itemWidth),\n        h: parseInt(itemLength),\n        img: img\n      }),\n      // Increment the counter to ensure key is always unique.\n      newCounter: this.state.newCounter + 1\n    });\n  } // We're using the cols coming back from this to calculate where to add new items.\n\n\n  onBreakpointChange(breakpoint, cols) {\n    this.setState({\n      breakpoint: breakpoint,\n      cols: cols\n    });\n  }\n\n  onLayoutChange(layout) {\n    this.props.onLayoutChange(layout);\n    this.setState({\n      layout: layout\n    });\n  }\n\n  onRemoveItem(i) {\n    console.log(\"removing\", i);\n    this.setState({\n      items: _.reject(this.state.items, {\n        i: i\n      })\n    });\n  }\n\n  render() {\n    const _this$calcGridHeight = this.calcGridHeight(this.props.width, this.props.height),\n          _this$calcGridHeight2 = _slicedToArray(_this$calcGridHeight, 4),\n          w = _this$calcGridHeight2[0],\n          h = _this$calcGridHeight2[1],\n          width = _this$calcGridHeight2[2],\n          height = _this$calcGridHeight2[3];\n\n    console.log(width);\n    console.log(height);\n    var gridSize = {\n      width: width + \"px\",\n      height: height + \"px\"\n    };\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(ObjectList, {\n      saveItems: this.saveItems,\n      gridWidth: width,\n      gridHeight: height,\n      parkWidth: w,\n      parkHeight: h,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"grid\",\n      ref: gridElement => this.gridElement = gridElement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(GridLayout, {\n      className: \"layout\",\n      style: gridSize,\n      cols: height,\n      rowHeight: 1,\n      width: width,\n      autoSize: true,\n      verticalCompact: false,\n      margin: [0, 0],\n      preventCollision: true,\n      maxRows: height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, _.map(this.state.items, el => this.createElement(el)))));\n  }\n\n}\n\nexport default MyFirstGrid;","map":{"version":3,"sources":["/home/mdehaan51/highrev-projects/merch-designer/client/src/components/DesignLayout.js"],"names":["React","GridLayout","ObjectList","_","MyFirstGrid","Component","constructor","props","saveItems","l","w","img","gridHeight","gridWidth","parkHeight","parkWidth","width","len","onAddItem","state","items","newCounter","height","bind","onBreakpointChange","componentDidMount","gridElement","clientHeight","clientWidth","setState","calcGridHeight","h","ratio","console","log","createElement","el","removeStyle","position","right","top","cursor","i","add","backgroundImage","backgroundSize","itemWidth","itemLength","concat","x","y","parseInt","breakpoint","cols","onLayoutChange","layout","onRemoveItem","reject","render","gridSize","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport GridLayout from \"react-grid-layout\";\nimport ObjectList from \"./ObjectList.js\";\nimport _ from \"lodash\";\n\nclass MyFirstGrid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: [],\n      newCounter: 0,\n      gridHeight: \"\",\n      gridWidth: \"\",\n      width: \"\",\n      height: \"\"\n    };\n\n    this.onAddItem = this.onAddItem.bind(this);\n    this.onBreakpointChange = this.onBreakpointChange.bind(this);\n  }\n\n  componentDidMount() {\n    var gridHeight = this.gridElement.clientHeight;\n    var gridWidth = this.gridElement.clientWidth;\n    this.setState({\n      gridHeight: gridHeight,\n      gridWidth: gridWidth\n    });\n  }\n\n  saveItems = (l, w, img, gridHeight, gridWidth, parkHeight, parkWidth) => {\n    let width = w;\n    let len = l;\n    this.onAddItem(\n      len,\n      width,\n      img,\n      gridHeight,\n      gridWidth,\n      parkHeight,\n      parkWidth\n    );\n  };\n\n  calcGridHeight(w, h) {\n    let ratio = \"\";\n    let height = \"\";\n    let width = \"\";\n    if (h > w) {\n      console.log(\"w is bigger\");\n      height = this.state.gridHeight * 0.8;\n      ratio = height / h;\n      width = w * ratio;\n    } else if (w > h) {\n      console.log(\"h is bigger\");\n      width = this.state.gridWidth * 0.8;\n      ratio = width / w;\n      height = h * ratio;\n    } else {\n      width = this.state.gridHeight * 0.8;\n      height = this.state.gridHeight * 0.8;\n    }\n\n    return [w, h, width, height];\n  }\n  createElement(el) {\n    const removeStyle = {\n      position: \"absolute\",\n      right: \"2px\",\n      top: 0,\n      cursor: \"pointer\"\n    };\n    const i = el.add ? \"+\" : el.i;\n    console.log(el.img);\n\n    return (\n      <div\n        key={i}\n        data-grid={el}\n        style={{ backgroundImage: `url(${el.img})`, backgroundSize: \"cover\" }}\n      />\n    );\n  }\n\n  onAddItem(len, width, img, gridWidth, gridHeight, parkWidth, parkHeight) {\n    let itemWidth = (gridWidth / parkWidth) * width;\n    console.log(gridWidth);\n    console.log(parkWidth);\n    console.log(width);\n    let itemLength = (gridHeight / parkHeight) * len;\n    this.setState({\n      items: this.state.items.concat({\n        i: \"n\" + this.state.newCounter,\n        x: 0,\n        y: 0,\n        w: parseInt(itemWidth),\n        h: parseInt(itemLength),\n        img: img\n      }),\n      // Increment the counter to ensure key is always unique.\n      newCounter: this.state.newCounter + 1\n    });\n  }\n\n  // We're using the cols coming back from this to calculate where to add new items.\n  onBreakpointChange(breakpoint, cols) {\n    this.setState({\n      breakpoint: breakpoint,\n      cols: cols\n    });\n  }\n\n  onLayoutChange(layout) {\n    this.props.onLayoutChange(layout);\n    this.setState({ layout: layout });\n  }\n\n  onRemoveItem(i) {\n    console.log(\"removing\", i);\n    this.setState({ items: _.reject(this.state.items, { i: i }) });\n  }\n\n  render() {\n    const [w, h, width, height] = this.calcGridHeight(\n      this.props.width,\n      this.props.height\n    );\n    console.log(width);\n    console.log(height);\n\n    var gridSize = {\n      width: width + \"px\",\n      height: height + \"px\"\n    };\n    return (\n      <div className=\"container\">\n        <ObjectList\n          saveItems={this.saveItems}\n          gridWidth={width}\n          gridHeight={height}\n          parkWidth={w}\n          parkHeight={h}\n        />\n        <div\n          className=\"grid\"\n          ref={gridElement => (this.gridElement = gridElement)}\n        >\n          <GridLayout\n            className=\"layout\"\n            style={gridSize}\n            cols={height}\n            rowHeight={1}\n            width={width}\n            autoSize={true}\n            verticalCompact={false}\n            margin={[0, 0]}\n            preventCollision={true}\n            maxRows={height}\n          >\n            {_.map(this.state.items, el => this.createElement(el))}\n          </GridLayout>\n        </div>\n      </div>\n    );\n  }\n}\nexport default MyFirstGrid;\n"]},"metadata":{},"sourceType":"module"}