{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING, SET_CURRENT_ADMIN } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"/api/users/register\", userData).then(subscribeUser(userData)).then(res => history.push(\"/\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const subscribeUser = userData => {\n  console.log(userData);\n  axios.post(\"/api/mailer/subscribe\", userData).then(response => {\n    if (response.data.msg === \"success\") {\n      alert(\"User Subscribed.\"); //this.resetForm();\n    } else if (response.data.msg === \"fail\") {\n      alert(\"Subscribe failed.\");\n    }\n  });\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const token = res.data.token;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const loginAdmin = userData => dispatch => {\n  axios.post(\"/api/users/admin\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const token = res.data.token;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    console.log(decoded);\n    dispatch(setCurrentAdmin(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const resetPassword = userData => dispatch => {\n  axios.post(\"/api/mailer/reset\", userData).then(res => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: {\n        success: \"Success! Please check your email\"\n      }\n    });\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const updatePassword = userData => dispatch => {\n  axios.post(\"/api/users/updatePassword\", userData).then(res => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: {\n        success: \"Success! Please check your email\"\n      }\n    });\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\nexport const setCurrentAdmin = decoded => {\n  return {\n    type: SET_CURRENT_ADMIN,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = history => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/home/mdehaan/dev/sock-design/Shock-Merch-Designer/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","SET_CURRENT_ADMIN","registerUser","userData","history","dispatch","post","then","subscribeUser","res","push","catch","err","type","payload","response","data","console","log","msg","alert","loginUser","token","localStorage","setItem","decoded","setCurrentUser","loginAdmin","setCurrentAdmin","resetPassword","success","updatePassword","setUserLoading","logoutUser","removeItem"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n\tGET_ERRORS,\n\tSET_CURRENT_USER,\n\tUSER_LOADING,\n\tSET_CURRENT_ADMIN\n} from \"./types\";\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n\taxios\n\t\t.post(\"/api/users/register\", userData)\n\t\t.then(subscribeUser(userData))\n\t\t.then(res => history.push(\"/\")) // re-direct to login on successful register\n\t\t.catch(err =>\n\t\t\tdispatch({\n\t\t\t\ttype: GET_ERRORS,\n\t\t\t\tpayload: err.response.data\n\t\t\t})\n\t\t);\n};\n\nexport const subscribeUser = (userData) => {\n\tconsole.log(userData)\n\taxios.post(\"/api/mailer/subscribe\", userData).then(response => {\n\t\tif (response.data.msg === \"success\") {\n\t\t\talert(\"User Subscribed.\");\n\t\t\t//this.resetForm();\n\t\t} else if (response.data.msg === \"fail\") {\n\t\t\talert(\"Subscribe failed.\");\n\t\t}\n})}\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n\taxios\n\t\t.post(\"/api/users/login\", userData)\n\t\t.then(res => {\n\t\t\t// Save to localStorage\n\t\t\t// Set token to localStorage\n\t\t\tconst { token } = res.data;\n\t\t\tlocalStorage.setItem(\"jwtToken\", token);\n\t\t\t// Set token to Auth header\n\t\t\tsetAuthToken(token);\n\t\t\t// Decode token to get user data\n\t\t\tconst decoded = jwt_decode(token);\n\t\t\t// Set current user\n\t\t\tdispatch(setCurrentUser(decoded));\n\t\t})\n\t\t.catch(err =>\n\t\t\tdispatch({\n\t\t\t\ttype: GET_ERRORS,\n\t\t\t\tpayload: err.response.data\n\t\t\t})\n\t\t);\n};\n\nexport const loginAdmin = userData => dispatch => {\n\taxios\n\t\t.post(\"/api/users/admin\", userData)\n\t\t.then(res => {\n\t\t\t// Save to localStorage\n\t\t\t// Set token to localStorage\n\t\t\tconst { token } = res.data;\n\t\t\tlocalStorage.setItem(\"jwtToken\", token);\n\t\t\t// Set token to Auth header\n\t\t\tsetAuthToken(token);\n\t\t\t// Decode token to get user data\n\t\t\tconst decoded = jwt_decode(token);\n\t\t\t// Set current user\n\t\t\tconsole.log(decoded);\n\t\t\tdispatch(setCurrentAdmin(decoded));\n\t\t})\n\t\t.catch(err =>\n\t\t\tdispatch({\n\t\t\t\ttype: GET_ERRORS,\n\t\t\t\tpayload: err.response.data\n\t\t\t})\n\t\t);\n};\n\nexport const resetPassword = userData => dispatch => {\n\taxios\n\t\t.post(\"/api/mailer/reset\", userData)\n\t\t.then(res => {\n\t\t\tdispatch({\n\t\t\t\ttype: GET_ERRORS,\n\t\t\t\tpayload: { success: \"Success! Please check your email\" }\n\t\t\t});\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch({\n\t\t\t\ttype: GET_ERRORS,\n\t\t\t\tpayload: err.response.data\n\t\t\t});\n\t\t});\n};\n\nexport const updatePassword = userData => dispatch => {\n\taxios\n\t\t.post(\"/api/users/updatePassword\", userData)\n\t\t.then(res => {\n\t\t\tdispatch({\n\t\t\t\ttype: GET_ERRORS,\n\t\t\t\tpayload: { success: \"Success! Please check your email\" }\n\t\t\t});\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch({\n\t\t\t\ttype: GET_ERRORS,\n\t\t\t\tpayload: err.response.data\n\t\t\t});\n\t\t});\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n\treturn {\n\t\ttype: SET_CURRENT_USER,\n\t\tpayload: decoded\n\t};\n};\n\nexport const setCurrentAdmin = decoded => {\n\treturn {\n\t\ttype: SET_CURRENT_ADMIN,\n\t\tpayload: decoded\n\t};\n};\n// User loading\nexport const setUserLoading = () => {\n\treturn {\n\t\ttype: USER_LOADING\n\t};\n};\n// Log user out\nexport const logoutUser = history => dispatch => {\n\t// Remove token from local storage\n\tlocalStorage.removeItem(\"jwtToken\");\n\t// Remove auth header for future requests\n\tsetAuthToken(false);\n\t// Set current user to empty object {} which will set isAuthenticated to false\n\tdispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}