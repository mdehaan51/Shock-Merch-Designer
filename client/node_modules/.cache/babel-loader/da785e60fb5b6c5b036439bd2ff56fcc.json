{"ast":null,"code":"import { FontManager, FONT_FAMILY_DEFAULT, OPTIONS_DEFAULTS } from '@samuelmeuli/font-manager';\nimport React, { PureComponent } from 'react';\n\nfunction getFontId(fontFamily) {\n  return fontFamily.replace(/\\s+/g, \"-\").toLowerCase();\n}\n\nclass FontPicker extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expanded: false,\n      loadingStatus: \"loading\"\n    };\n    const _this$props = this.props,\n          apiKey = _this$props.apiKey,\n          activeFontFamily = _this$props.activeFontFamily,\n          pickerId = _this$props.pickerId,\n          families = _this$props.families,\n          categories = _this$props.categories,\n          scripts = _this$props.scripts,\n          variants = _this$props.variants,\n          limit = _this$props.limit,\n          sort = _this$props.sort,\n          onChange = _this$props.onChange;\n    const options = {\n      pickerId,\n      families,\n      categories,\n      scripts,\n      variants,\n      limit,\n      sort\n    };\n    this.fontManager = new FontManager(apiKey, activeFontFamily, options, onChange);\n    this.fontManager.init().then(() => {\n      this.setState({\n        loadingStatus: \"finished\"\n      });\n    }).catch(err => {\n      this.setState({\n        loadingStatus: \"error\"\n      });\n      console.error(\"Error trying to fetch the list of available fonts\");\n      console.error(err);\n    });\n    this.onClose = this.onClose.bind(this);\n    this.onSelection = this.onSelection.bind(this);\n    this.setActiveFontFamily = this.setActiveFontFamily.bind(this);\n    this.toggleExpanded = this.toggleExpanded.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const _this$props2 = this.props,\n          activeFontFamily = _this$props2.activeFontFamily,\n          onChange = _this$props2.onChange;\n\n    if (activeFontFamily !== prevProps.activeFontFamily) {\n      this.setActiveFontFamily(activeFontFamily);\n    }\n\n    if (onChange !== prevProps.onChange) {\n      this.fontManager.setOnChange(onChange);\n    }\n  }\n\n  onClose(e) {\n    let targetEl = e.target;\n    const fontPickerEl = document.getElementById(\"font-picker\".concat(this.fontManager.selectorSuffix));\n\n    while (true) {\n      if (targetEl === fontPickerEl) {\n        return;\n      }\n\n      if (targetEl.parentNode) {\n        targetEl = targetEl.parentNode;\n      } else {\n        this.toggleExpanded();\n        return;\n      }\n    }\n  }\n\n  onSelection(e) {\n    const target = e.target;\n    const activeFontFamily = target.textContent;\n\n    if (!activeFontFamily) {\n      throw Error(\"Missing font family in clicked font button\");\n    }\n\n    this.setActiveFontFamily(activeFontFamily);\n    this.toggleExpanded();\n  }\n\n  setActiveFontFamily(activeFontFamily) {\n    this.fontManager.setActiveFont(activeFontFamily);\n  }\n\n  generateFontList(fonts) {\n    const activeFontFamily = this.props.activeFontFamily;\n    const loadingStatus = this.state.loadingStatus;\n\n    if (loadingStatus !== \"finished\") {\n      return React.createElement(\"div\", null);\n    }\n\n    return React.createElement(\"ul\", {\n      className: \"font-list\"\n    }, fonts.map(font => {\n      const isActive = font.family === activeFontFamily;\n      const fontId = getFontId(font.family);\n      return React.createElement(\"li\", {\n        key: fontId,\n        className: \"font-list-item\"\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        id: \"font-button-\".concat(fontId).concat(this.fontManager.selectorSuffix),\n        className: \"font-button \".concat(isActive ? \"active-font\" : \"\"),\n        onClick: this.onSelection,\n        onKeyPress: this.onSelection\n      }, font.family));\n    }));\n  }\n\n  toggleExpanded() {\n    const expanded = this.state.expanded;\n\n    if (expanded) {\n      this.setState({\n        expanded: false\n      });\n      document.removeEventListener(\"click\", this.onClose);\n    } else {\n      this.setState({\n        expanded: true\n      });\n      document.addEventListener(\"click\", this.onClose);\n    }\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          activeFontFamily = _this$props3.activeFontFamily,\n          sort = _this$props3.sort;\n    const _this$state = this.state,\n          expanded = _this$state.expanded,\n          loadingStatus = _this$state.loadingStatus;\n    const fonts = Array.from(this.fontManager.getFonts().values());\n\n    if (sort === \"alphabet\") {\n      fonts.sort((font1, font2) => font1.family.localeCompare(font2.family));\n    }\n\n    return React.createElement(\"div\", {\n      id: \"font-picker\".concat(this.fontManager.selectorSuffix),\n      className: expanded ? \"expanded\" : \"\"\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"dropdown-button\",\n      onClick: this.toggleExpanded,\n      onKeyPress: this.toggleExpanded\n    }, React.createElement(\"p\", {\n      className: \"dropdown-font-family\"\n    }, activeFontFamily), React.createElement(\"p\", {\n      className: \"dropdown-icon \".concat(loadingStatus)\n    })), loadingStatus === \"finished\" && this.generateFontList(fonts));\n  }\n\n}\n\nFontPicker.defaultProps = {\n  defaultFamily: FONT_FAMILY_DEFAULT,\n  pickerId: OPTIONS_DEFAULTS.pickerId,\n  families: OPTIONS_DEFAULTS.families,\n  categories: OPTIONS_DEFAULTS.categories,\n  scripts: OPTIONS_DEFAULTS.scripts,\n  variants: OPTIONS_DEFAULTS.variants,\n  limit: OPTIONS_DEFAULTS.limit,\n  sort: OPTIONS_DEFAULTS.sort,\n  onChange: () => {}\n};\nexport default FontPicker;","map":null,"metadata":{},"sourceType":"module"}