{"ast":null,"code":"var _jsxFileName = \"/home/mdehaan51/highrev-projects/merch-designer/client/src/components/DrawingComponents/SidePreview.js\";\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Portal from \"./Portal\";\nimport { Stage, Layer, Rect, Text, Image } from \"react-konva\";\nimport Konva from \"konva\";\nimport SockImage from \"./SockImage\";\nimport SockImage2 from \"./SockImage2\";\nimport { Socks } from \"./constants\";\nimport TextElement from \"./TextElement\";\nimport { addTextNode } from \"./TextNode\";\nimport { connect } from \"react-redux\";\n\nclass SidePreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputList: [{\n        x: 10,\n        y: 10,\n        width: 100,\n        height: 100,\n        //fill: \"red\",\n        id: \"rect1\"\n      }],\n      selectedShape: \"\"\n    };\n    const stageRef = React.createRef();\n  }\n\n  render() {\n    // Stage is a div container\n    // Layer is actual canvas element (so you may have several canvases in the stage)\n    // And then we have canvas shapes inside the Layer\n    const primary = this.props.drawing.primary;\n    const secondary = this.props.drawing.secondary;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"primary-color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Stage, {\n      ref: this.stageRef,\n      width: 600,\n      height: 750,\n      onMouseDown: e => {\n        // deselect when clicked on empty area\n        const clickedOnEmpty = e.target === e.target.getStage();\n        console.log(e.target.getStage());\n\n        if (clickedOnEmpty) {\n          this.setState({\n            selectedShape: null\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(SockImage2, {\n      blue: primary.blue,\n      red: primary.red,\n      green: primary.green,\n      width: 500,\n      height: 694,\n      src: \"images/socksideview4.png\",\n      shadowBlur: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(SockImage2, {\n      blue: secondary.blue,\n      red: secondary.red,\n      green: secondary.green,\n      width: 500,\n      height: 694,\n      src: \"images/sideheeltoe.png\",\n      shadowBlur: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(TextElement, {\n      text: this.props.drawing.previewText.text,\n      textProps: this.props.drawing.previewText.style //shapeProps={data}\n\n      /*isSelected={\n      \tdata.id === this.state.selectedShape\n      }*/\n\n      /*onSelect={() => {\n      \tconsole.log(data.id);\n      \tthis.setState({\n      \t\tselectedShape: data.id\n      \t});\n      }}*/\n      ,\n      onChange: newAttrs => {\n        const inputs = this.state.inputList.slice();\n        inputs[id] = newAttrs;\n        this.setState({\n          inputList: inputs\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), this.state.inputList.map((data, id) => {\n      console.log(data);\n      return React.createElement(TextElement, {\n        key: id,\n        text: \"\",\n        shapeProps: data,\n        isSelected: data.id === this.state.selectedShape,\n        onSelect: () => {\n          console.log(data.id);\n          this.setState({\n            selectedShape: data.id\n          });\n        },\n        onChange: newAttrs => {\n          const inputs = this.state.inputList.slice();\n          inputs[id] = newAttrs;\n          this.setState({\n            inputList: inputs\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      });\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  drawing: state.drawing\n});\n\nexport default connect(mapStateToProps)(SidePreview);","map":{"version":3,"sources":["/home/mdehaan51/highrev-projects/merch-designer/client/src/components/DrawingComponents/SidePreview.js"],"names":["React","Component","render","Portal","Stage","Layer","Rect","Text","Image","Konva","SockImage","SockImage2","Socks","TextElement","addTextNode","connect","SidePreview","constructor","props","state","inputList","x","y","width","height","id","selectedShape","stageRef","createRef","primary","drawing","secondary","e","clickedOnEmpty","target","getStage","console","log","setState","blue","red","green","previewText","text","style","newAttrs","inputs","slice","map","data","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Portal from \"./Portal\";\nimport { Stage, Layer, Rect, Text, Image } from \"react-konva\";\nimport Konva from \"konva\";\n\nimport SockImage from \"./SockImage\";\n\nimport SockImage2 from \"./SockImage2\";\nimport { Socks } from \"./constants\";\nimport TextElement from \"./TextElement\";\nimport { addTextNode } from \"./TextNode\";\n\nimport { connect } from \"react-redux\";\n\nclass SidePreview extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinputList: [\n\t\t\t\t{\n\t\t\t\t\tx: 10,\n\t\t\t\t\ty: 10,\n\t\t\t\t\twidth: 100,\n\t\t\t\t\theight: 100,\n\t\t\t\t\t//fill: \"red\",\n\t\t\t\t\tid: \"rect1\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tselectedShape: \"\"\n\t\t};\n\t\tconst stageRef = React.createRef();\n\t}\n\n\trender() {\n\t\t// Stage is a div container\n\t\t// Layer is actual canvas element (so you may have several canvases in the stage)\n\t\t// And then we have canvas shapes inside the Layer\n\t\tconst primary = this.props.drawing.primary;\n\t\tconst secondary = this.props.drawing.secondary;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"primary-color\">\n\t\t\t\t\t<Stage\n\t\t\t\t\t\tref={this.stageRef}\n\t\t\t\t\t\twidth={600}\n\t\t\t\t\t\theight={750}\n\t\t\t\t\t\tonMouseDown={e => {\n\t\t\t\t\t\t\t// deselect when clicked on empty area\n\t\t\t\t\t\t\tconst clickedOnEmpty =\n\t\t\t\t\t\t\t\te.target === e.target.getStage();\n\t\t\t\t\t\t\tconsole.log(e.target.getStage());\n\t\t\t\t\t\t\tif (clickedOnEmpty) {\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedShape: null\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Layer>\n\t\t\t\t\t\t\t{/*<Portal>*/}\n\n\t\t\t\t\t\t\t{/*<Portal>*/}\n\t\t\t\t\t\t\t<SockImage2\n\t\t\t\t\t\t\t\tblue={primary.blue}\n\t\t\t\t\t\t\t\tred={primary.red}\n\t\t\t\t\t\t\t\tgreen={primary.green}\n\t\t\t\t\t\t\t\twidth={500}\n\t\t\t\t\t\t\t\theight={694}\n\t\t\t\t\t\t\t\tsrc=\"images/socksideview4.png\"\n\t\t\t\t\t\t\t\tshadowBlur={10}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<SockImage2\n\t\t\t\t\t\t\t\tblue={secondary.blue}\n\t\t\t\t\t\t\t\tred={secondary.red}\n\t\t\t\t\t\t\t\tgreen={secondary.green}\n\t\t\t\t\t\t\t\twidth={500}\n\t\t\t\t\t\t\t\theight={694}\n\t\t\t\t\t\t\t\tsrc=\"images/sideheeltoe.png\"\n\t\t\t\t\t\t\t\tshadowBlur={0}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<TextElement\n\t\t\t\t\t\t\t\ttext={this.props.drawing.previewText.text}\n\t\t\t\t\t\t\t\ttextProps={this.props.drawing.previewText.style}\n\t\t\t\t\t\t\t\t//shapeProps={data}\n\t\t\t\t\t\t\t\t/*isSelected={\n\t\t\t\t\t\t\t\t\tdata.id === this.state.selectedShape\n\t\t\t\t\t\t\t\t}*/\n\t\t\t\t\t\t\t\t/*onSelect={() => {\n\t\t\t\t\t\t\t\t\tconsole.log(data.id);\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\tselectedShape: data.id\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}*/\n\t\t\t\t\t\t\t\tonChange={newAttrs => {\n\t\t\t\t\t\t\t\t\tconst inputs = this.state.inputList.slice();\n\t\t\t\t\t\t\t\t\tinputs[id] = newAttrs;\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\tinputList: inputs\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t{this.state.inputList.map((data, id) => {\n\t\t\t\t\t\t\t\tconsole.log(data);\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TextElement\n\t\t\t\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t\t\t\ttext=\"\"\n\t\t\t\t\t\t\t\t\t\tshapeProps={data}\n\t\t\t\t\t\t\t\t\t\tisSelected={\n\t\t\t\t\t\t\t\t\t\t\tdata.id === this.state.selectedShape\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tonSelect={() => {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(data.id);\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tselectedShape: data.id\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonChange={newAttrs => {\n\t\t\t\t\t\t\t\t\t\t\tconst inputs = this.state.inputList.slice();\n\t\t\t\t\t\t\t\t\t\t\tinputs[id] = newAttrs;\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tinputList: inputs\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Layer>\n\t\t\t\t\t</Stage>\n\t\t\t\t</div>\n\t\t\t\t{/*<div className=\"secondary-color\">\n\t\t\t\t\t<Stage width={800} height={800}>\n\t\t\t\t\t\t<Layer>\n\t\t\t\t\t\t\t<SockImage\n\t\t\t\t\t\t\t\tblue={color.blue}\n\t\t\t\t\t\t\t\tred={color.red}\n\t\t\t\t\t\t\t\tgreen={color.green}\n\t\t\t\t\t\t\t\tsrc={null}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Layer>\n\t\t\t\t\t</Stage>\n\t\t\t\t</div>*/}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => ({\n\tdrawing: state.drawing\n});\n\nexport default connect(mapStateToProps)(SidePreview);\n"]},"metadata":{},"sourceType":"module"}