{"ast":null,"code":"var _jsxFileName = \"/home/mdehaan51/highrev-projects/merch-designer/client/src/components/DrawingComponents/BottomPreview.js\";\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Portal from \"./Portal\";\nimport { Stage, Layer, Rect, Text, Image } from \"react-konva\";\nimport Konva from \"konva\";\nimport SockImage from \"./SockImage\";\nimport SockImage2 from \"./SockImage2\";\nimport { Socks } from \"./constants\";\nimport SquareElement from \"./TextElement\";\nimport ShapeElement from \"./ShapeElement\";\nimport TextElement from \"./TextElement\";\nimport ImageElement from \"./ImageElement\";\nimport { setShapeColor, addShape, updateShapes, addText, updateText, selectText, addImage, updateImages, selectImage } from \"../../actions/bottomActions\";\nimport { saveData } from \"../../actions/drawingActions\";\nimport { connect } from \"react-redux\";\n\nclass BottomPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputShapes: [],\n      inputList: [{\n        x: 10,\n        y: 10,\n        width: 100,\n        height: 100,\n        //fill: \"red\",\n        id: \"rect1\"\n      }],\n      selectedShape: \"\",\n      width: null,\n      height: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      width: this.refs.stageContainer.offsetWidth,\n      height: this.refs.stageContainer.offsetHeight\n    });\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      selectedShape: null\n    });\n    this.props.selectText(\"\");\n    let sideURL = this.refs.bottomStage.toDataURL();\n    this.props.saveData(\"bottom\", sideURL);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.side !== this.props.side) {\n      let sideURL = this.refs.bottomStage.toDataURL();\n      this.props.saveData(\"bottom\", sideURL);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.drawing.inputShapes !== this.props.drawing.inputShapes) {\n      let newItem = this.props.drawing.inputShapes.slice(-1)[0]; //this.props.updateShapes(newItem);\n\n      this.setState({\n        inputShapes: [...this.state.inputShapes, newItem]\n      });\n    }\n  }\n\n  render() {\n    // Stage is a div container\n    // Layer is actual canvas element (so you may have several canvases in the stage)\n    // And then we have canvas shapes inside the Layer\n    const primary = this.props.drawing.primary;\n    const secondary = this.props.drawing.secondary;\n    const shape = this.props.bottom.shape;\n    const shapeList = this.props.bottom.shapes;\n    const bottomText = this.props.bottom.text;\n    const imageList = this.props.bottom.images;\n    let scale;\n    let sockWidth = 350;\n    let sockHeight = 699;\n    let screenHeight = 750;\n    let xShift = this.state.width / 4;\n\n    if (window.innerWidth < 993) {\n      sockHeight = this.state.height * 0.9;\n      scale = sockHeight / 699;\n      sockWidth = Math.min(scale * sockWidth);\n      screenHeight = 375;\n      xShift = 10;\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"primary-color\",\n      ref: \"stageContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Stage, {\n      ref: \"bottomStage\",\n      width: sockWidth * 1.1,\n      height: screenHeight,\n      onMouseDown: e => {\n        // deselect when clicked on empty area\n        const clickedOnEmpty = e.target === e.target.getStage();\n\n        if (clickedOnEmpty) {\n          this.setState({\n            selectedShape: null\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(SockImage2, {\n      x: xShift,\n      width: sockWidth,\n      height: sockHeight,\n      blue: primary.blue,\n      red: primary.red,\n      green: primary.green,\n      src: \"images/sockbottom.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(SockImage2, {\n      x: xShift,\n      width: sockWidth,\n      height: sockHeight,\n      blue: secondary.blue,\n      red: secondary.red,\n      green: secondary.green,\n      src: \"images/sockbottomheeltoe.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), bottomText.map((data, id) => {\n      return React.createElement(TextElement, {\n        key: id,\n        rotation: data.rotation,\n        x: data.x,\n        y: data.y,\n        text: data.text,\n        id: data.id,\n        textProps: data,\n        isSelected: data.id === this.state.selectedShape,\n        onSelect: () => {\n          this.setState({\n            selectedShape: data.id\n          });\n          this.props.selectText(data.id);\n        },\n        onChange: newAttrs => {\n          const inputs = this.props.bottom.text.slice();\n          inputs[id] = newAttrs;\n          this.props.updateText(inputs);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      });\n    }), imageList.map((data, id) => {\n      return React.createElement(ImageElement, {\n        key: id,\n        url: data.src,\n        shapeProps: data,\n        x: data.x,\n        y: data.y,\n        isSelected: data.id === this.state.selectedShape,\n        onSelect: () => {\n          this.setState({\n            selectedShape: data.id\n          });\n          this.props.selectImage(data.id);\n        },\n        onChange: newAttrs => {\n          const inputs = this.props.bottom.images.slice();\n          console.log(inputs);\n          console.log(newAttrs);\n          inputs[id] = newAttrs;\n          this.props.updateImages(inputs);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      });\n    }), shapeList.map((data, id) => {\n      return React.createElement(ShapeElement, {\n        key: id,\n        url: data.src,\n        blue: shape.blue,\n        red: shape.red,\n        green: shape.green,\n        hex: shape.hex,\n        shapeProps: data,\n        x: data.x,\n        y: data.y,\n        isSelected: data.id === this.state.selectedShape,\n        onSelect: () => {\n          this.setState({\n            selectedShape: data.id\n          });\n        },\n        onChange: newAttrs => {\n          const inputs = this.props.bottom.shapes.slice();\n          console.log(inputs);\n          console.log(newAttrs);\n          inputs[id] = newAttrs;\n          this.props.updateShapes(inputs);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      });\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  drawing: state.drawing,\n  bottom: state.bottom\n});\n\nexport default connect(mapStateToProps, {\n  setShapeColor,\n  addShape,\n  updateShapes,\n  addText,\n  updateText,\n  selectText,\n  addImage,\n  updateImages,\n  selectImage,\n  saveData\n})(BottomPreview);","map":{"version":3,"sources":["/home/mdehaan51/highrev-projects/merch-designer/client/src/components/DrawingComponents/BottomPreview.js"],"names":["React","Component","render","Portal","Stage","Layer","Rect","Text","Image","Konva","SockImage","SockImage2","Socks","SquareElement","ShapeElement","TextElement","ImageElement","setShapeColor","addShape","updateShapes","addText","updateText","selectText","addImage","updateImages","selectImage","saveData","connect","BottomPreview","constructor","props","state","inputShapes","inputList","x","y","width","height","id","selectedShape","componentDidMount","setState","refs","stageContainer","offsetWidth","offsetHeight","componentWillUnmount","sideURL","bottomStage","toDataURL","componentDidUpdate","prevProps","side","drawing","newItem","slice","primary","secondary","shape","bottom","shapeList","shapes","bottomText","text","imageList","images","scale","sockWidth","sockHeight","screenHeight","xShift","window","innerWidth","Math","min","e","clickedOnEmpty","target","getStage","blue","red","green","map","data","rotation","newAttrs","inputs","src","console","log","hex","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Portal from \"./Portal\";\nimport { Stage, Layer, Rect, Text, Image } from \"react-konva\";\nimport Konva from \"konva\";\n\nimport SockImage from \"./SockImage\";\nimport SockImage2 from \"./SockImage2\";\nimport { Socks } from \"./constants\";\nimport SquareElement from \"./TextElement\";\nimport ShapeElement from \"./ShapeElement\";\n\nimport TextElement from \"./TextElement\";\nimport ImageElement from \"./ImageElement\";\n\nimport {\n\tsetShapeColor,\n\taddShape,\n\tupdateShapes,\n\taddText,\n\tupdateText,\n\tselectText,\n\taddImage,\n\tupdateImages,\n\tselectImage\n} from \"../../actions/bottomActions\";\n\nimport { saveData } from \"../../actions/drawingActions\";\n\nimport { connect } from \"react-redux\";\n\nclass BottomPreview extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinputShapes: [],\n\t\t\tinputList: [\n\t\t\t\t{\n\t\t\t\t\tx: 10,\n\t\t\t\t\ty: 10,\n\t\t\t\t\twidth: 100,\n\t\t\t\t\theight: 100,\n\t\t\t\t\t//fill: \"red\",\n\t\t\t\t\tid: \"rect1\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tselectedShape: \"\",\n\t\t\twidth: null,\n\t\t\theight: null\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.setState({\n\t\t\twidth: this.refs.stageContainer.offsetWidth,\n\t\t\theight: this.refs.stageContainer.offsetHeight\n\t\t});\n\t}\n\tcomponentWillUnmount() {\n\t\tthis.setState({\n\t\t\tselectedShape: null\n\t\t});\n\t\tthis.props.selectText(\"\");\n\t\tlet sideURL = this.refs.bottomStage.toDataURL();\n\t\tthis.props.saveData(\"bottom\", sideURL);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.side !== this.props.side) {\n\t\t\tlet sideURL = this.refs.bottomStage.toDataURL();\n\t\t\tthis.props.saveData(\"bottom\", sideURL);\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (prevProps.drawing.inputShapes !== this.props.drawing.inputShapes) {\n\t\t\tlet newItem = this.props.drawing.inputShapes.slice(-1)[0];\n\t\t\t//this.props.updateShapes(newItem);\n\t\t\tthis.setState({\n\t\t\t\tinputShapes: [...this.state.inputShapes, newItem]\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\t// Stage is a div container\n\t\t// Layer is actual canvas element (so you may have several canvases in the stage)\n\t\t// And then we have canvas shapes inside the Layer\n\t\tconst primary = this.props.drawing.primary;\n\t\tconst secondary = this.props.drawing.secondary;\n\t\tconst shape = this.props.bottom.shape;\n\t\tconst shapeList = this.props.bottom.shapes;\n\t\tconst bottomText = this.props.bottom.text;\n\t\tconst imageList = this.props.bottom.images;\n\n\t\tlet scale;\n\t\tlet sockWidth = 350;\n\t\tlet sockHeight = 699;\n\t\tlet screenHeight = 750;\n\t\tlet xShift = this.state.width / 4;\n\t\tif (window.innerWidth < 993) {\n\t\t\tsockHeight = this.state.height * 0.9;\n\t\t\tscale = sockHeight / 699;\n\n\t\t\tsockWidth = Math.min(scale * sockWidth);\n\t\t\tscreenHeight = 375;\n\t\t\txShift = 10;\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"primary-color\" ref=\"stageContainer\">\n\t\t\t\t\t<Stage\n\t\t\t\t\t\tref=\"bottomStage\"\n\t\t\t\t\t\twidth={sockWidth * 1.1}\n\t\t\t\t\t\theight={screenHeight}\n\t\t\t\t\t\tonMouseDown={e => {\n\t\t\t\t\t\t\t// deselect when clicked on empty area\n\t\t\t\t\t\t\tconst clickedOnEmpty =\n\t\t\t\t\t\t\t\te.target === e.target.getStage();\n\n\t\t\t\t\t\t\tif (clickedOnEmpty) {\n\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\tselectedShape: null\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Layer>\n\t\t\t\t\t\t\t<SockImage2\n\t\t\t\t\t\t\t\tx={xShift}\n\t\t\t\t\t\t\t\twidth={sockWidth}\n\t\t\t\t\t\t\t\theight={sockHeight}\n\t\t\t\t\t\t\t\tblue={primary.blue}\n\t\t\t\t\t\t\t\tred={primary.red}\n\t\t\t\t\t\t\t\tgreen={primary.green}\n\t\t\t\t\t\t\t\tsrc=\"images/sockbottom.png\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<SockImage2\n\t\t\t\t\t\t\t\tx={xShift}\n\t\t\t\t\t\t\t\twidth={sockWidth}\n\t\t\t\t\t\t\t\theight={sockHeight}\n\t\t\t\t\t\t\t\tblue={secondary.blue}\n\t\t\t\t\t\t\t\tred={secondary.red}\n\t\t\t\t\t\t\t\tgreen={secondary.green}\n\t\t\t\t\t\t\t\tsrc=\"images/sockbottomheeltoe.png\"\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t{bottomText.map((data, id) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TextElement\n\t\t\t\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t\t\t\trotation={data.rotation}\n\t\t\t\t\t\t\t\t\t\tx={data.x}\n\t\t\t\t\t\t\t\t\t\ty={data.y}\n\t\t\t\t\t\t\t\t\t\ttext={data.text}\n\t\t\t\t\t\t\t\t\t\tid={data.id}\n\t\t\t\t\t\t\t\t\t\ttextProps={data}\n\t\t\t\t\t\t\t\t\t\tisSelected={\n\t\t\t\t\t\t\t\t\t\t\tdata.id === this.state.selectedShape\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tonSelect={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tselectedShape: data.id\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tthis.props.selectText(data.id);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonChange={newAttrs => {\n\t\t\t\t\t\t\t\t\t\t\tconst inputs = this.props.bottom.text.slice();\n\t\t\t\t\t\t\t\t\t\t\tinputs[id] = newAttrs;\n\t\t\t\t\t\t\t\t\t\t\tthis.props.updateText(inputs);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t{imageList.map((data, id) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<ImageElement\n\t\t\t\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t\t\t\turl={data.src}\n\t\t\t\t\t\t\t\t\t\tshapeProps={data}\n\t\t\t\t\t\t\t\t\t\tx={data.x}\n\t\t\t\t\t\t\t\t\t\ty={data.y}\n\t\t\t\t\t\t\t\t\t\tisSelected={\n\t\t\t\t\t\t\t\t\t\t\tdata.id === this.state.selectedShape\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tonSelect={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tselectedShape: data.id\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\tthis.props.selectImage(data.id);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonChange={newAttrs => {\n\t\t\t\t\t\t\t\t\t\t\tconst inputs = this.props.bottom.images.slice();\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(inputs);\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(newAttrs);\n\t\t\t\t\t\t\t\t\t\t\tinputs[id] = newAttrs;\n\t\t\t\t\t\t\t\t\t\t\tthis.props.updateImages(inputs);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t{shapeList.map((data, id) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<ShapeElement\n\t\t\t\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t\t\t\turl={data.src}\n\t\t\t\t\t\t\t\t\t\tblue={shape.blue}\n\t\t\t\t\t\t\t\t\t\tred={shape.red}\n\t\t\t\t\t\t\t\t\t\tgreen={shape.green}\n\t\t\t\t\t\t\t\t\t\thex={shape.hex}\n\t\t\t\t\t\t\t\t\t\tshapeProps={data}\n\t\t\t\t\t\t\t\t\t\tx={data.x}\n\t\t\t\t\t\t\t\t\t\ty={data.y}\n\t\t\t\t\t\t\t\t\t\tisSelected={\n\t\t\t\t\t\t\t\t\t\t\tdata.id === this.state.selectedShape\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tonSelect={() => {\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\t\t\tselectedShape: data.id\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tonChange={newAttrs => {\n\t\t\t\t\t\t\t\t\t\t\tconst inputs = this.props.bottom.shapes.slice();\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(inputs);\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(newAttrs);\n\t\t\t\t\t\t\t\t\t\t\tinputs[id] = newAttrs;\n\t\t\t\t\t\t\t\t\t\t\tthis.props.updateShapes(inputs);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Layer>\n\t\t\t\t\t</Stage>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => ({\n\tdrawing: state.drawing,\n\tbottom: state.bottom\n});\n\nexport default connect(\n\tmapStateToProps,\n\t{\n\t\tsetShapeColor,\n\t\taddShape,\n\t\tupdateShapes,\n\t\taddText,\n\t\tupdateText,\n\t\tselectText,\n\t\taddImage,\n\t\tupdateImages,\n\t\tselectImage,\n\t\tsaveData\n\t}\n)(BottomPreview);\n"]},"metadata":{},"sourceType":"module"}