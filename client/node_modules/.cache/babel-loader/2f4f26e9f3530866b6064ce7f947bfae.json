{"ast":null,"code":"var _jsxFileName = \"/home/mdehaan51/highrev-projects/park-builder/client/src/components/NewGridLayout.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ObjectList from \"./ObjectList.js\";\nimport GridObjectItem from \"./gridObjectItem.js\";\nimport ComponentCounter from \"./ComponentCounter.js\";\nimport \"../styles/App.css\";\n\nclass GridLayout extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      draggedItem: [],\n      addedComponents: [],\n      counter: 0,\n      componentX: 0,\n      componentY: 0,\n      movingComponentId: \"\",\n      gridWidth: 0,\n      gridHeight: 0,\n      scale: 0,\n      activeItem: \"\",\n      gridSize: \"28px 28px\"\n    };\n\n    this.findGridSize = () => {\n      console.log(\"finding initial grid\");\n      let screenWidth = this.refs[\"gridContainer\"].offsetWidth;\n      let gridWidth = Math.round(screenWidth * 0.8 / 100) * 100;\n      let screenHeight = this.refs[\"gridContainer\"].offsetWidth;\n      let gridHeight = Math.round(screenHeight * 0.8 / 100) * 100;\n      let scale = gridWidth / this.props.width;\n      this.setState({\n        gridWidth: gridWidth,\n        gridHeight: gridHeight,\n        scale: scale\n      });\n    };\n\n    this.setSize = () => {\n      if (this.props.width === this.props.height) {\n        let screenWidth = this.refs[\"gridContainer\"].offsetWidth;\n        let gridWidth = Math.round(screenWidth * 0.8 / 100) * 100;\n        let screenHeight = this.refs[\"gridContainer\"].offsetWidth;\n        let gridHeight = Math.round(screenHeight * 0.8 / 100) * 100;\n        let scale = gridWidth / this.props.width;\n        this.setState({\n          gridWidth: gridWidth,\n          gridHeight: gridHeight,\n          scale: scale\n        }, this.setGridSize(gridWidth, this.props.width));\n      } else if (this.props.width > this.props.height) {\n        let screenWidth = this.refs[\"gridContainer\"].offsetWidth;\n        let gridWidth = Math.round(screenWidth * 0.8 / 100) * 100;\n        let scale = this.props.width / this.props.height;\n        let gridHeight = gridWidth / scale;\n        this.setState({\n          gridWidth: gridWidth,\n          gridHeight: gridHeight,\n          scale: scale\n        }, this.setGridSize(gridWidth, this.props.width));\n      } else if (this.props.width < this.props.height) {\n        let screenHeight = this.refs[\"gridContainer\"].offsetHeight;\n        let gridHeight = Math.round(screenHeight * 0.8 / 100) * 100;\n        let scale = this.props.height / this.props.width;\n        let gridWidth = gridHeight / scale;\n        this.setState({\n          gridWidth: gridWidth,\n          gridHeight: gridHeight,\n          scale: scale\n        }, this.setGridSize(gridHeight, this.props.height));\n      }\n    };\n\n    this.onDragOver = ev => {\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n\n    this.onDrop = ev => {\n      ev.preventDefault();\n      let draggedItem = this.state.draggedItem;\n      let gridCoords = ReactDOM.findDOMNode(this.refs[\"gridContainer\"]).getBoundingClientRect();\n      this.getItemCoords(gridCoords.x, gridCoords.y, ev.clientX, ev.clientY);\n\n      if (draggedItem.length === 0) {\n        return; //preventing 'invisible' elements being added\n      } else {\n        this.setState({\n          counter: this.state.counter + 1,\n          draggedItem: [],\n          addedComponents: [...this.state.addedComponents, draggedItem]\n        });\n      }\n    };\n\n    this.getItemCoords = (gridX, gridY, itemX, itemY) => {\n      this.setState({\n        componentX: itemX - gridX,\n        componentY: itemY - gridY\n      });\n    };\n\n    this.itemIsDragging = (id, name, img, width, length) => {\n      let pieceId = this.state.counter;\n      let rotation = 0;\n      this.setState({\n        draggedItem: {\n          pieceId,\n          name,\n          img,\n          length,\n          width,\n          rotation\n        }\n      });\n    };\n\n    this.itemIsDropped = (evt, id, img, width, length) => {//console.log(evt.clientX);\n    };\n\n    this.saveLocation = (left, top, right, bottom) => {//console.log(left, top, right, bottom);\n    };\n\n    this.saveItems = (id, img, width, length, rotation) => {\n      this.setState({\n        addedComponents: [...this.state.components, [id, img, length, width, rotation]]\n      });\n    };\n\n    this.onDragStart = (ev, id) => {\n      this.setState({\n        movingComponentId: id\n      });\n    };\n\n    this.deleteComponent = id => {\n      let toBeDeleted = id;\n      let filteredItems = this.state.addedComponents.filter(function (e) {\n        return e.pieceId !== toBeDeleted;\n      });\n      this.setState({\n        addedComponents: filteredItems\n      });\n      /*let allComponents = this.state.addedComponents;\n      let filteredItems = allComponents.filter(function(e) {\n      \treturn e.pieceId !== toBeDeleted;\n      });\n      let removedItem = allComponents.find(function(e) {\n      \treturn e.pieceId === toBeDeleted;\n      });\n      this.removeItem(removedItem.name);\n      this.setState({\n      \taddedComponents: filteredItems\n      });*/\n    };\n\n    this.rotateComponent = () => {\n      let toBeRotated = this.state.movingComponentId;\n      let allComponents = this.state.addedComponents;\n      let currentRotation = allComponents.find(e => {\n        return e.pieceId === toBeRotated;\n      });\n      let newRotation = currentRotation.rotation < 360 ? currentRotation.rotation + 90 : 0;\n      Object.assign(allComponents.find(e => e.pieceId === toBeRotated), {\n        rotation: newRotation\n      });\n    };\n\n    this.removeItem = name => {};\n\n    this.saveActiveItem = id => {\n      console.log(this.state.activeItem);\n      this.setState({\n        activeItem: id\n      });\n    };\n\n    this.setGridSize = (gridSize, inputSize) => {\n      let backgroundGridSize = gridSize / (inputSize / 10);\n      console.log(gridSize);\n      console.log(inputSize);\n      this.setState({\n        gridSize: \"\".concat(backgroundGridSize, \"px \").concat(backgroundGridSize, \"px\")\n      });\n    };\n  }\n\n  componentWillMount() {}\n\n  componentDidMount() {\n    //this.setGridSize();\n    this.findGridSize();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.width !== this.props.width || prevProps.height !== this.props.height) {\n      this.setSize(); //this.setGridSize();\n    }\n  }\n\n  render() {\n    let size = {\n      width: this.state.gridWidth,\n      height: this.state.gridHeight,\n      backgroundSize: this.state.gridSize\n    };\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"container-background\",\n      src: \"images/background.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(ObjectList, {\n      saveLocation: this.saveLocation,\n      itemIsDragging: this.itemIsDragging,\n      saveItems: this.saveItems,\n      itemIsDropped: this.itemIsDropped,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"grid-container\",\n      ref: \"gridContainer\" //onDrop={e => this.onDrop(e, \"complete\")}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"grid-box\",\n      style: size,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"width-distance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, this.props.width, \" ft\"), React.createElement(\"div\", {\n      className: \"height-distance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, this.props.height, \" ft\"), React.createElement(\"div\", {\n      className: \"grid\",\n      style: size,\n      onDragOver: e => this.onDragOver(e),\n      onDrop: e => this.onDrop(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, this.state.addedComponents.map((items, id) => {\n      return React.createElement(GridObjectItem, {\n        key: id,\n        pieceId: items.pieceId,\n        img: items.img,\n        width: items.width,\n        height: items.length,\n        onDragStart: this.onDragStart,\n        newGridWidth: this.props.gridWidth,\n        saveLocation: this.saveLocation,\n        xLocation: this.state.componentX,\n        yLocation: this.state.componentY,\n        rotate: items.rotation,\n        scale: this.state.scale,\n        saveActiveItem: this.saveActiveItem,\n        currentlyActive: this.state.activeItem,\n        deleteComponent: this.deleteComponent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      });\n    })))), React.createElement(ComponentCounter, {\n      addedComponents: this.state.addedComponents,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default GridLayout;","map":{"version":3,"sources":["/home/mdehaan51/highrev-projects/park-builder/client/src/components/NewGridLayout.js"],"names":["React","Component","ReactDOM","ObjectList","GridObjectItem","ComponentCounter","GridLayout","state","draggedItem","addedComponents","counter","componentX","componentY","movingComponentId","gridWidth","gridHeight","scale","activeItem","gridSize","findGridSize","console","log","screenWidth","refs","offsetWidth","Math","round","screenHeight","props","width","setState","setSize","height","setGridSize","offsetHeight","onDragOver","ev","stopPropagation","preventDefault","onDrop","gridCoords","findDOMNode","getBoundingClientRect","getItemCoords","x","y","clientX","clientY","length","gridX","gridY","itemX","itemY","itemIsDragging","id","name","img","pieceId","rotation","itemIsDropped","evt","saveLocation","left","top","right","bottom","saveItems","components","onDragStart","deleteComponent","toBeDeleted","filteredItems","filter","e","rotateComponent","toBeRotated","allComponents","currentRotation","find","newRotation","Object","assign","removeItem","saveActiveItem","inputSize","backgroundGridSize","componentWillMount","componentDidMount","componentDidUpdate","prevProps","render","size","backgroundSize","map","items"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ObjectList from \"./ObjectList.js\";\nimport GridObjectItem from \"./gridObjectItem.js\";\nimport ComponentCounter from \"./ComponentCounter.js\";\nimport \"../styles/App.css\";\n\nclass GridLayout extends Component {\n\tstate = {\n\t\tdraggedItem: [],\n\t\taddedComponents: [],\n\t\tcounter: 0,\n\t\tcomponentX: 0,\n\t\tcomponentY: 0,\n\t\tmovingComponentId: \"\",\n\t\tgridWidth: 0,\n\t\tgridHeight: 0,\n\t\tscale: 0,\n\t\tactiveItem: \"\",\n\t\tgridSize: \"28px 28px\"\n\t};\n\tcomponentWillMount() {}\n\tcomponentDidMount() {\n\t\t//this.setGridSize();\n\t\tthis.findGridSize();\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (\n\t\t\tprevProps.width !== this.props.width ||\n\t\t\tprevProps.height !== this.props.height\n\t\t) {\n\t\t\tthis.setSize();\n\t\t\t//this.setGridSize();\n\t\t}\n\t}\n\n\tfindGridSize = () => {\n\t\tconsole.log(\"finding initial grid\");\n\t\tlet screenWidth = this.refs[\"gridContainer\"].offsetWidth;\n\t\tlet gridWidth = Math.round((screenWidth * 0.8) / 100) * 100;\n\t\tlet screenHeight = this.refs[\"gridContainer\"].offsetWidth;\n\t\tlet gridHeight = Math.round((screenHeight * 0.8) / 100) * 100;\n\t\tlet scale = gridWidth / this.props.width;\n\t\tthis.setState({\n\t\t\tgridWidth: gridWidth,\n\t\t\tgridHeight: gridHeight,\n\t\t\tscale: scale\n\t\t});\n\t};\n\tsetSize = () => {\n\t\tif (this.props.width === this.props.height) {\n\t\t\tlet screenWidth = this.refs[\"gridContainer\"].offsetWidth;\n\t\t\tlet gridWidth = Math.round((screenWidth * 0.8) / 100) * 100;\n\t\t\tlet screenHeight = this.refs[\"gridContainer\"].offsetWidth;\n\t\t\tlet gridHeight = Math.round((screenHeight * 0.8) / 100) * 100;\n\t\t\tlet scale = gridWidth / this.props.width;\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tgridWidth: gridWidth,\n\t\t\t\t\tgridHeight: gridHeight,\n\t\t\t\t\tscale: scale\n\t\t\t\t},\n\t\t\t\tthis.setGridSize(gridWidth, this.props.width)\n\t\t\t);\n\t\t} else if (this.props.width > this.props.height) {\n\t\t\tlet screenWidth = this.refs[\"gridContainer\"].offsetWidth;\n\t\t\tlet gridWidth = Math.round((screenWidth * 0.8) / 100) * 100;\n\t\t\tlet scale = this.props.width / this.props.height;\n\t\t\tlet gridHeight = gridWidth / scale;\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tgridWidth: gridWidth,\n\t\t\t\t\tgridHeight: gridHeight,\n\t\t\t\t\tscale: scale\n\t\t\t\t},\n\t\t\t\tthis.setGridSize(gridWidth, this.props.width)\n\t\t\t);\n\t\t} else if (this.props.width < this.props.height) {\n\t\t\tlet screenHeight = this.refs[\"gridContainer\"].offsetHeight;\n\t\t\tlet gridHeight = Math.round((screenHeight * 0.8) / 100) * 100;\n\t\t\tlet scale = this.props.height / this.props.width;\n\t\t\tlet gridWidth = gridHeight / scale;\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tgridWidth: gridWidth,\n\t\t\t\t\tgridHeight: gridHeight,\n\t\t\t\t\tscale: scale\n\t\t\t\t},\n\t\t\t\tthis.setGridSize(gridHeight, this.props.height)\n\t\t\t);\n\t\t}\n\t};\n\n\tonDragOver = ev => {\n\t\tev.stopPropagation();\n\t\tev.preventDefault();\n\t};\n\tonDrop = ev => {\n\t\tev.preventDefault();\n\t\tlet draggedItem = this.state.draggedItem;\n\t\tlet gridCoords = ReactDOM.findDOMNode(\n\t\t\tthis.refs[\"gridContainer\"]\n\t\t).getBoundingClientRect();\n\t\tthis.getItemCoords(gridCoords.x, gridCoords.y, ev.clientX, ev.clientY);\n\t\tif (draggedItem.length === 0) {\n\t\t\treturn; //preventing 'invisible' elements being added\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tcounter: this.state.counter + 1,\n\t\t\t\tdraggedItem: [],\n\t\t\t\taddedComponents: [...this.state.addedComponents, draggedItem]\n\t\t\t});\n\t\t}\n\t};\n\n\tgetItemCoords = (gridX, gridY, itemX, itemY) => {\n\t\tthis.setState({\n\t\t\tcomponentX: itemX - gridX,\n\t\t\tcomponentY: itemY - gridY\n\t\t});\n\t};\n\n\titemIsDragging = (id, name, img, width, length) => {\n\t\tlet pieceId = this.state.counter;\n\t\tlet rotation = 0;\n\t\tthis.setState({\n\t\t\tdraggedItem: { pieceId, name, img, length, width, rotation }\n\t\t});\n\t};\n\titemIsDropped = (evt, id, img, width, length) => {\n\t\t//console.log(evt.clientX);\n\t};\n\tsaveLocation = (left, top, right, bottom) => {\n\t\t//console.log(left, top, right, bottom);\n\t};\n\n\tsaveItems = (id, img, width, length, rotation) => {\n\t\tthis.setState({\n\t\t\taddedComponents: [\n\t\t\t\t...this.state.components,\n\t\t\t\t[id, img, length, width, rotation]\n\t\t\t]\n\t\t});\n\t};\n\tonDragStart = (ev, id) => {\n\t\tthis.setState({\n\t\t\tmovingComponentId: id\n\t\t});\n\t};\n\tdeleteComponent = id => {\n\t\tlet toBeDeleted = id;\n\t\tlet filteredItems = this.state.addedComponents.filter(function(e) {\n\t\t\treturn e.pieceId !== toBeDeleted;\n\t\t});\n\t\tthis.setState({\n\t\t\taddedComponents: filteredItems\n\t\t});\n\n\t\t/*let allComponents = this.state.addedComponents;\n\t\tlet filteredItems = allComponents.filter(function(e) {\n\t\t\treturn e.pieceId !== toBeDeleted;\n\t\t});\n\t\tlet removedItem = allComponents.find(function(e) {\n\t\t\treturn e.pieceId === toBeDeleted;\n\t\t});\n\t\tthis.removeItem(removedItem.name);\n\t\tthis.setState({\n\t\t\taddedComponents: filteredItems\n\t\t});*/\n\t};\n\n\trotateComponent = () => {\n\t\tlet toBeRotated = this.state.movingComponentId;\n\t\tlet allComponents = this.state.addedComponents;\n\t\tlet currentRotation = allComponents.find(e => {\n\t\t\treturn e.pieceId === toBeRotated;\n\t\t});\n\t\tlet newRotation =\n\t\t\tcurrentRotation.rotation < 360 ? currentRotation.rotation + 90 : 0;\n\t\tObject.assign(allComponents.find(e => e.pieceId === toBeRotated), {\n\t\t\trotation: newRotation\n\t\t});\n\t};\n\n\tremoveItem = name => {};\n\n\tsaveActiveItem = id => {\n\t\tconsole.log(this.state.activeItem);\n\t\tthis.setState({\n\t\t\tactiveItem: id\n\t\t});\n\t};\n\tsetGridSize = (gridSize, inputSize) => {\n\t\tlet backgroundGridSize = gridSize / (inputSize / 10);\n\t\tconsole.log(gridSize);\n\t\tconsole.log(inputSize);\n\t\tthis.setState({\n\t\t\tgridSize: `${backgroundGridSize}px ${backgroundGridSize}px`\n\t\t});\n\t};\n\n\trender() {\n\t\tlet size = {\n\t\t\twidth: this.state.gridWidth,\n\t\t\theight: this.state.gridHeight,\n\t\t\tbackgroundSize: this.state.gridSize\n\t\t};\n\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<img\n\t\t\t\t\tclassName=\"container-background\"\n\t\t\t\t\tsrc=\"images/background.jpg\"\n\t\t\t\t/>\n\t\t\t\t<ObjectList\n\t\t\t\t\tsaveLocation={this.saveLocation}\n\t\t\t\t\titemIsDragging={this.itemIsDragging}\n\t\t\t\t\tsaveItems={this.saveItems}\n\t\t\t\t\titemIsDropped={this.itemIsDropped}\n\t\t\t\t/>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"grid-container\"\n\t\t\t\t\tref=\"gridContainer\"\n\t\t\t\t\t//onDrop={e => this.onDrop(e, \"complete\")}\n\t\t\t\t>\n\t\t\t\t\t{/*<DeleteComponent deleteComponent={this.deleteComponent} />\n\t\t\t\t\t<RotateObject rotateComponent={this.rotateComponent} />*/}\n\t\t\t\t\t<div className=\"grid-box\" style={size}>\n\t\t\t\t\t\t<div className=\"width-distance\">\n\t\t\t\t\t\t\t{this.props.width} ft\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"height-distance\">\n\t\t\t\t\t\t\t{this.props.height} ft\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"grid\"\n\t\t\t\t\t\t\tstyle={size}\n\t\t\t\t\t\t\tonDragOver={e => this.onDragOver(e)}\n\t\t\t\t\t\t\tonDrop={e => this.onDrop(e)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{this.state.addedComponents.map((items, id) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<GridObjectItem\n\t\t\t\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t\t\t\tpieceId={items.pieceId}\n\t\t\t\t\t\t\t\t\t\timg={items.img}\n\t\t\t\t\t\t\t\t\t\twidth={items.width}\n\t\t\t\t\t\t\t\t\t\theight={items.length}\n\t\t\t\t\t\t\t\t\t\tonDragStart={this.onDragStart}\n\t\t\t\t\t\t\t\t\t\tnewGridWidth={this.props.gridWidth}\n\t\t\t\t\t\t\t\t\t\tsaveLocation={this.saveLocation}\n\t\t\t\t\t\t\t\t\t\txLocation={this.state.componentX}\n\t\t\t\t\t\t\t\t\t\tyLocation={this.state.componentY}\n\t\t\t\t\t\t\t\t\t\trotate={items.rotation}\n\t\t\t\t\t\t\t\t\t\tscale={this.state.scale}\n\t\t\t\t\t\t\t\t\t\tsaveActiveItem={this.saveActiveItem}\n\t\t\t\t\t\t\t\t\t\tcurrentlyActive={this.state.activeItem}\n\t\t\t\t\t\t\t\t\t\tdeleteComponent={this.deleteComponent}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<ComponentCounter\n\t\t\t\t\taddedComponents={\n\t\t\t\t\t\tthis.state.addedComponents\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default GridLayout;\n"]},"metadata":{},"sourceType":"module"}