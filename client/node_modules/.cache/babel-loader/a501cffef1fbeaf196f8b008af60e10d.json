{"ast":null,"code":"var _jsxFileName = \"/home/mdehaan51/highrev-projects/park-builder/client/src/components/NewGridLayout.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ObjectList from \"./ObjectList.js\";\nimport GridObjectItem from \"./gridObjectItem.js\";\nimport ComponentCounter from \"./ComponentCounter.js\";\nimport Modal from \"./Modal.js\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../actions/authActions\";\nimport { toggleModal } from \"../actions/gridActions\";\nimport html2canvas from \"html2canvas\";\nimport Navbar from \"./NavBar.js\";\nimport \"../styles/App.css\";\n\nclass GridLayout extends Component {\n  constructor(props) {\n    super(props);\n\n    this.findGridSize = () => {\n      let screenWidth = this.refs[\"gridContainer\"].offsetWidth;\n      let gridWidth = Math.round(screenWidth * 0.8 / 100) * 100;\n      let screenHeight = this.refs[\"gridContainer\"].offsetWidth;\n      let gridHeight = Math.round(screenHeight * 0.8 / 100) * 100;\n      let scale = gridWidth / this.props.grid.width;\n      this.setState({\n        gridWidth: gridWidth,\n        gridHeight: gridHeight,\n        scale: scale\n      });\n    };\n\n    this.gridIsSquare = (width, height) => {\n      let sideLength;\n      let scale;\n\n      if (width > height) {\n        sideLength = Math.round(height * 0.8 / 100) * 100;\n      } else {\n        sideLength = Math.round(width * 0.8 / 100) * 100;\n      }\n\n      scale = sideLength / this.props.grid.width;\n      this.setState({\n        gridWidth: sideLength,\n        gridHeight: sideLength,\n        scale: scale\n      }, this.setGridSize(sideLength, this.props.grid.width));\n    };\n\n    this.widthIsLarger = (width, height) => {\n      let gridWidth = Math.round(width * 0.8 / 100) * 100;\n      let scale = this.props.grid.width / this.props.grid.height;\n      let gridHeight = gridWidth / scale;\n      this.setState({\n        gridWidth: gridWidth,\n        gridHeight: gridHeight,\n        scale: scale\n      }, this.setGridSize(gridWidth, this.props.grid.width));\n    };\n\n    this.heightIsLarger = (width, height) => {\n      let gridHeight = Math.round(height * 0.8 / 100) * 100;\n      let scale = this.props.grid.height / this.props.grid.width;\n      let gridWidth = gridHeight / scale;\n      this.setState({\n        gridWidth: gridWidth,\n        gridHeight: gridHeight,\n        scale: scale\n      }, this.setGridSize(gridHeight, this.props.grid.height));\n    };\n\n    this.setSize = () => {\n      const dimensions = this.refs[\"gridContainer\"].getBoundingClientRect();\n      let screenWidth = dimensions.width;\n      let screenHeight = dimensions.height;\n\n      if (this.props.grid.width === this.props.grid.height) {\n        this.gridIsSquare(screenWidth, screenHeight);\n      } else if (this.props.grid.width > this.props.grid.height) {\n        this.widthIsLarger(screenWidth, screenHeight);\n      } else if (this.props.grid.width < this.props.grid.height) {\n        this.heightIsLarger(screenWidth, screenHeight);\n      }\n    };\n\n    this.onDragOver = ev => {\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n\n    this.onDrop = ev => {\n      ev.preventDefault();\n      let draggedItem = this.state.draggedItem;\n      let gridCoords = ReactDOM.findDOMNode(this.refs[\"gridBox\"]).getBoundingClientRect();\n      this.getItemCoords(gridCoords.x, gridCoords.y, ev.clientX, ev.clientY, draggedItem.width, draggedItem.length);\n      draggedItem.xLoc = this.state.componentX;\n      draggedItem.yLoc = this.state.componentY;\n\n      if (draggedItem.length === 0) {\n        return; //preventing 'invisible' elements being added\n      } else {\n        this.setState({\n          counter: this.state.counter + 1,\n          draggedItem: [],\n          addedComponents: [...this.state.addedComponents, draggedItem]\n        });\n      }\n    };\n\n    this.getItemCoords = (gridX, gridY, itemX, itemY, itemWidth, itemHeight) => {\n      this.setState({\n        gridX: gridX,\n        gridY: gridY,\n        componentX: itemX - gridX + parseInt(itemWidth),\n        componentY: itemY - gridY + parseInt(itemHeight)\n      });\n    };\n\n    this.itemIsDragging = (id, name, img, width, length) => {\n      let pieceId = this.state.addedComponents.length;\n      console.log(pieceId);\n      let rotation = 0;\n      let location = \"\";\n      let xLoc = \"\";\n      let yLoc = \"\";\n      this.setState({\n        draggedItem: {\n          pieceId,\n          name,\n          img,\n          length,\n          width,\n          rotation,\n          location,\n          xLoc,\n          yLoc\n        }\n      });\n    };\n\n    this.itemIsDropped = (evt, id, img, width, length) => {};\n\n    this.saveGrid = (id, loc) => {\n      var grid = this.state.addedComponents;\n      console.log(grid);\n      console.log(grid[id]);\n      grid[id].location = loc; //grid[id]\n\n      localStorage.setItem(\"gridElements\", JSON.stringify(grid));\n    };\n\n    this.loadGrid = () => {\n      var saved = JSON.parse(localStorage.getItem(\"gridElements\"));\n      console.log(saved);\n\n      if (saved) {\n        this.setState({\n          addedComponents: saved\n        });\n      }\n    };\n\n    this.saveItems = (id, img, width, length, rotation) => {\n      this.setState({\n        addedComponents: [...this.state.components, [id, img, length, width, rotation]]\n      });\n    };\n\n    this.onDragStart = (ev, id) => {\n      this.setState({\n        movingComponentId: id\n      });\n    };\n\n    this.deleteComponent = id => {\n      let toBeDeleted = id;\n      let filteredItems = this.state.addedComponents.filter(function (e) {\n        return e.pieceId !== toBeDeleted;\n      });\n      this.setState({\n        addedComponents: filteredItems\n      });\n    };\n\n    this.rotateComponent = () => {\n      let toBeRotated = this.state.movingComponentId;\n      let allComponents = this.state.addedComponents;\n      let currentRotation = allComponents.find(e => {\n        return e.pieceId === toBeRotated;\n      });\n      let newRotation = currentRotation.rotation < 360 ? currentRotation.rotation + 90 : 0;\n      Object.assign(allComponents.find(e => e.pieceId === toBeRotated), {\n        rotation: newRotation\n      });\n    };\n\n    this.removeItem = name => {};\n\n    this.saveActiveItem = id => {\n      this.setState({\n        activeItem: id\n      });\n    };\n\n    this.setGridSize = (gridSize, inputSize) => {\n      let backgroundGridSize = gridSize / (inputSize / 10);\n      this.setState({\n        gridSize: \"\".concat(backgroundGridSize, \"px \").concat(backgroundGridSize, \"px\")\n      });\n    };\n\n    this.onLogoutClick = e => {\n      e.preventDefault();\n      this.props.history.push(\"/\");\n      this.props.logoutUser(this.props.history);\n    };\n\n    this.hideModal = e => {\n      e.preventDefault();\n      const modal = {\n        active: false,\n        type: \"\",\n        title: \"\"\n      };\n      this.props.toggleModal(modal);\n    };\n\n    this.saveList = items => {\n      this.setState({\n        counterList: items\n      });\n    };\n\n    this.captureImage = () => {\n      let element = document.getElementById(\"capture\");\n      html2canvas(element).then(canvas => {\n        let imgData = canvas.toDataURL(\"image/jpeg\");\n        this.setState({\n          imgData: imgData\n        });\n      });\n    };\n\n    this.state = {\n      draggedItem: [],\n      addedComponents: [],\n      counter: 0,\n      componentX: 0,\n      componentY: 0,\n      movingComponentId: \"\",\n      gridWidth: 0,\n      gridHeight: 0,\n      scale: 0,\n      activeItem: 0,\n      gridSize: \"28px 28px\",\n      counterList: \"\",\n      gridX: \"\",\n      gridY: \"\",\n      imgData: \"\"\n    };\n  }\n\n  componentDidMount() {\n    //this.setGridSize();\n    this.findGridSize();\n    this.setSize();\n    this.loadGrid();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.grid.width !== this.props.grid.width || prevProps.grid.height !== this.props.grid.height) {\n      this.setSize(); //this.setGridSize();\n    }\n  }\n\n  render() {\n    let size = {\n      width: this.state.gridWidth,\n      height: this.state.gridHeight,\n      backgroundSize: this.state.gridSize\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      setSize: this.setSize,\n      request: this.showRequestModal,\n      help: this.showHelpModal,\n      captureImage: this.captureImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      show: this.props.grid.modal.active,\n      handleClose: this.hideModal,\n      title: this.props.grid.modal.title,\n      type: this.props.grid.modal.type,\n      components: this.state.counterList,\n      captureImage: this.state.imgData,\n      name: this.props.auth.user.name,\n      email: this.props.auth.user.email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"builder-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"\",\n      className: \"container-background\",\n      src: \"images/background.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      onClick: this.onLogoutClick,\n      className: \"logout-button \",\n      href: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \"Logout\"), React.createElement(ObjectList, {\n      saveLocation: this.saveLocation,\n      itemIsDragging: this.itemIsDragging,\n      saveItems: this.saveItems,\n      itemIsDropped: this.itemIsDropped,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"capture\",\n      className: \"grid-container\",\n      ref: \"gridContainer\" //onDrop={e => this.onDrop(e, \"complete\")}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"width-distance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, this.props.grid.width, \" ft\"), React.createElement(\"div\", {\n      className: \"grid-box\",\n      ref: \"gridBox\",\n      style: size,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"height-distance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, this.props.grid.height, \" ft\"), React.createElement(\"div\", {\n      className: \"grid\",\n      style: size,\n      onDragOver: e => this.onDragOver(e),\n      onDrop: e => this.onDrop(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, this.state.addedComponents.map((items, id) => {\n      let num = this.state.addedComponents.length;\n      let name = this.state.addedComponents.name;\n      return React.createElement(GridObjectItem, {\n        key: items.pieceId,\n        pieceId: items.pieceId,\n        img: items.img,\n        width: items.width,\n        height: items.length,\n        location: items.location,\n        onDragStart: this.onDragStart,\n        gridWidth: this.state.gridWidth,\n        gridHeight: this.state.gridHeight,\n        saveGrid: this.saveGrid,\n        xLocation: this.state.componentX,\n        yLocation: this.state.componentY,\n        rotate: items.rotation,\n        scale: this.state.scale,\n        saveActiveItem: this.saveActiveItem,\n        currentlyActive: this.state.activeItem,\n        deleteComponent: this.deleteComponent,\n        gridX: this.state.gridX,\n        gridY: this.state.gridY,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      });\n    }))), React.createElement(\"div\", {\n      className: \"grid-note\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, \"Each Square is 10ft x 10ft\")), React.createElement(ComponentCounter, {\n      addedComponents: this.state.addedComponents,\n      saveList: this.saveList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  grid: state.grid\n});\n\nexport default connect(mapStateToProps, {\n  logoutUser,\n  toggleModal\n})(GridLayout);","map":{"version":3,"sources":["/home/mdehaan51/highrev-projects/park-builder/client/src/components/NewGridLayout.js"],"names":["React","Component","ReactDOM","ObjectList","GridObjectItem","ComponentCounter","Modal","connect","logoutUser","toggleModal","html2canvas","Navbar","GridLayout","constructor","props","findGridSize","screenWidth","refs","offsetWidth","gridWidth","Math","round","screenHeight","gridHeight","scale","grid","width","setState","gridIsSquare","height","sideLength","setGridSize","widthIsLarger","heightIsLarger","setSize","dimensions","getBoundingClientRect","onDragOver","ev","stopPropagation","preventDefault","onDrop","draggedItem","state","gridCoords","findDOMNode","getItemCoords","x","y","clientX","clientY","length","xLoc","componentX","yLoc","componentY","counter","addedComponents","gridX","gridY","itemX","itemY","itemWidth","itemHeight","parseInt","itemIsDragging","id","name","img","pieceId","console","log","rotation","location","itemIsDropped","evt","saveGrid","loc","localStorage","setItem","JSON","stringify","loadGrid","saved","parse","getItem","saveItems","components","onDragStart","movingComponentId","deleteComponent","toBeDeleted","filteredItems","filter","e","rotateComponent","toBeRotated","allComponents","currentRotation","find","newRotation","Object","assign","removeItem","saveActiveItem","activeItem","gridSize","inputSize","backgroundGridSize","onLogoutClick","history","push","hideModal","modal","active","type","title","saveList","items","counterList","captureImage","element","document","getElementById","then","canvas","imgData","toDataURL","componentDidMount","componentDidUpdate","prevProps","prevState","render","size","backgroundSize","showRequestModal","showHelpModal","auth","user","email","saveLocation","map","num","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ObjectList from \"./ObjectList.js\";\nimport GridObjectItem from \"./gridObjectItem.js\";\nimport ComponentCounter from \"./ComponentCounter.js\";\nimport Modal from \"./Modal.js\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../actions/authActions\";\nimport { toggleModal } from \"../actions/gridActions\";\nimport html2canvas from \"html2canvas\";\nimport Navbar from \"./NavBar.js\";\nimport \"../styles/App.css\";\n\nclass GridLayout extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdraggedItem: [],\n\t\t\taddedComponents: [],\n\t\t\tcounter: 0,\n\t\t\tcomponentX: 0,\n\t\t\tcomponentY: 0,\n\t\t\tmovingComponentId: \"\",\n\t\t\tgridWidth: 0,\n\t\t\tgridHeight: 0,\n\t\t\tscale: 0,\n\t\t\tactiveItem: 0,\n\t\t\tgridSize: \"28px 28px\",\n\t\t\tcounterList: \"\",\n\t\t\tgridX: \"\",\n\t\t\tgridY: \"\",\n\t\t\timgData: \"\"\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\t//this.setGridSize();\n\t\tthis.findGridSize();\n\t\tthis.setSize();\n\t\tthis.loadGrid();\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tif (\n\t\t\tprevProps.grid.width !== this.props.grid.width ||\n\t\t\tprevProps.grid.height !== this.props.grid.height\n\t\t) {\n\t\t\tthis.setSize();\n\t\t\t//this.setGridSize();\n\t\t}\n\t}\n\n\tfindGridSize = () => {\n\t\tlet screenWidth = this.refs[\"gridContainer\"].offsetWidth;\n\t\tlet gridWidth = Math.round((screenWidth * 0.8) / 100) * 100;\n\t\tlet screenHeight = this.refs[\"gridContainer\"].offsetWidth;\n\t\tlet gridHeight = Math.round((screenHeight * 0.8) / 100) * 100;\n\t\tlet scale = gridWidth / this.props.grid.width;\n\t\tthis.setState({\n\t\t\tgridWidth: gridWidth,\n\t\t\tgridHeight: gridHeight,\n\t\t\tscale: scale\n\t\t});\n\t};\n\n\tgridIsSquare = (width, height) => {\n\t\tlet sideLength;\n\t\tlet scale;\n\t\tif (width > height) {\n\t\t\tsideLength = Math.round((height * 0.8) / 100) * 100;\n\t\t} else {\n\t\t\tsideLength = Math.round((width * 0.8) / 100) * 100;\n\t\t}\n\t\tscale = sideLength / this.props.grid.width;\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tgridWidth: sideLength,\n\t\t\t\tgridHeight: sideLength,\n\t\t\t\tscale: scale\n\t\t\t},\n\t\t\tthis.setGridSize(sideLength, this.props.grid.width)\n\t\t);\n\t};\n\n\twidthIsLarger = (width, height) => {\n\t\tlet gridWidth = Math.round((width * 0.8) / 100) * 100;\n\t\tlet scale = this.props.grid.width / this.props.grid.height;\n\t\tlet gridHeight = gridWidth / scale;\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tgridWidth: gridWidth,\n\t\t\t\tgridHeight: gridHeight,\n\t\t\t\tscale: scale\n\t\t\t},\n\t\t\tthis.setGridSize(gridWidth, this.props.grid.width)\n\t\t);\n\t};\n\n\theightIsLarger = (width, height) => {\n\t\tlet gridHeight = Math.round((height * 0.8) / 100) * 100;\n\t\tlet scale = this.props.grid.height / this.props.grid.width;\n\t\tlet gridWidth = gridHeight / scale;\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tgridWidth: gridWidth,\n\t\t\t\tgridHeight: gridHeight,\n\t\t\t\tscale: scale\n\t\t\t},\n\t\t\tthis.setGridSize(gridHeight, this.props.grid.height)\n\t\t);\n\t};\n\n\tsetSize = () => {\n\t\tconst dimensions = this.refs[\"gridContainer\"].getBoundingClientRect();\n\t\tlet screenWidth = dimensions.width;\n\t\tlet screenHeight = dimensions.height;\n\t\tif (this.props.grid.width === this.props.grid.height) {\n\t\t\tthis.gridIsSquare(screenWidth, screenHeight);\n\t\t} else if (this.props.grid.width > this.props.grid.height) {\n\t\t\tthis.widthIsLarger(screenWidth, screenHeight);\n\t\t} else if (this.props.grid.width < this.props.grid.height) {\n\t\t\tthis.heightIsLarger(screenWidth, screenHeight);\n\t\t}\n\t};\n\n\tonDragOver = ev => {\n\t\tev.stopPropagation();\n\t\tev.preventDefault();\n\t};\n\n\tonDrop = ev => {\n\t\tev.preventDefault();\n\t\tlet draggedItem = this.state.draggedItem;\n\t\tlet gridCoords = ReactDOM.findDOMNode(\n\t\t\tthis.refs[\"gridBox\"]\n\t\t).getBoundingClientRect();\n\t\tthis.getItemCoords(\n\t\t\tgridCoords.x,\n\t\t\tgridCoords.y,\n\t\t\tev.clientX,\n\t\t\tev.clientY,\n\t\t\tdraggedItem.width,\n\t\t\tdraggedItem.length\n\t\t);\n\t\tdraggedItem.xLoc = this.state.componentX;\n\t\tdraggedItem.yLoc = this.state.componentY;\n\t\tif (draggedItem.length === 0) {\n\t\t\treturn; //preventing 'invisible' elements being added\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tcounter: this.state.counter + 1,\n\t\t\t\tdraggedItem: [],\n\t\t\t\taddedComponents: [...this.state.addedComponents, draggedItem]\n\t\t\t});\n\t\t}\n\t};\n\n\tgetItemCoords = (gridX, gridY, itemX, itemY, itemWidth, itemHeight) => {\n\t\tthis.setState({\n\t\t\tgridX: gridX,\n\t\t\tgridY: gridY,\n\t\t\tcomponentX: itemX - gridX + parseInt(itemWidth),\n\t\t\tcomponentY: itemY - gridY + parseInt(itemHeight)\n\t\t});\n\t};\n\n\titemIsDragging = (id, name, img, width, length) => {\n\t\tlet pieceId = this.state.addedComponents.length;\n\t\tconsole.log(pieceId);\n\t\tlet rotation = 0;\n\t\tlet location = \"\";\n\t\tlet xLoc = \"\";\n\t\tlet yLoc = \"\";\n\t\tthis.setState({\n\t\t\tdraggedItem: {\n\t\t\t\tpieceId,\n\t\t\t\tname,\n\t\t\t\timg,\n\t\t\t\tlength,\n\t\t\t\twidth,\n\t\t\t\trotation,\n\t\t\t\tlocation,\n\t\t\t\txLoc,\n\t\t\t\tyLoc\n\t\t\t}\n\t\t});\n\t};\n\titemIsDropped = (evt, id, img, width, length) => {};\n\n\tsaveGrid = (id, loc) => {\n\t\tvar grid = this.state.addedComponents;\n\t\tconsole.log(grid);\n\t\tconsole.log(grid[id]);\n\t\tgrid[id].location = loc;\n\t\t//grid[id]\n\t\tlocalStorage.setItem(\"gridElements\", JSON.stringify(grid));\n\t};\n\n\tloadGrid = () => {\n\t\tvar saved = JSON.parse(localStorage.getItem(\"gridElements\"));\n\t\tconsole.log(saved);\n\t\tif (saved) {\n\t\t\tthis.setState({\n\t\t\t\taddedComponents: saved\n\t\t\t});\n\t\t}\n\t};\n\n\tsaveItems = (id, img, width, length, rotation) => {\n\t\tthis.setState({\n\t\t\taddedComponents: [\n\t\t\t\t...this.state.components,\n\t\t\t\t[id, img, length, width, rotation]\n\t\t\t]\n\t\t});\n\t};\n\tonDragStart = (ev, id) => {\n\t\tthis.setState({\n\t\t\tmovingComponentId: id\n\t\t});\n\t};\n\tdeleteComponent = id => {\n\t\tlet toBeDeleted = id;\n\t\tlet filteredItems = this.state.addedComponents.filter(function(e) {\n\t\t\treturn e.pieceId !== toBeDeleted;\n\t\t});\n\t\tthis.setState({\n\t\t\taddedComponents: filteredItems\n\t\t});\n\t};\n\n\trotateComponent = () => {\n\t\tlet toBeRotated = this.state.movingComponentId;\n\t\tlet allComponents = this.state.addedComponents;\n\t\tlet currentRotation = allComponents.find(e => {\n\t\t\treturn e.pieceId === toBeRotated;\n\t\t});\n\t\tlet newRotation =\n\t\t\tcurrentRotation.rotation < 360 ? currentRotation.rotation + 90 : 0;\n\t\tObject.assign(allComponents.find(e => e.pieceId === toBeRotated), {\n\t\t\trotation: newRotation\n\t\t});\n\t};\n\n\tremoveItem = name => {};\n\n\tsaveActiveItem = id => {\n\t\tthis.setState({\n\t\t\tactiveItem: id\n\t\t});\n\t};\n\tsetGridSize = (gridSize, inputSize) => {\n\t\tlet backgroundGridSize = gridSize / (inputSize / 10);\n\t\tthis.setState({\n\t\t\tgridSize: `${backgroundGridSize}px ${backgroundGridSize}px`\n\t\t});\n\t};\n\tonLogoutClick = e => {\n\t\te.preventDefault();\n\t\tthis.props.history.push(\"/\");\n\t\tthis.props.logoutUser(this.props.history);\n\t};\n\n\thideModal = e => {\n\t\te.preventDefault();\n\t\tconst modal = {\n\t\t\tactive: false,\n\t\t\ttype: \"\",\n\t\t\ttitle: \"\"\n\t\t};\n\t\tthis.props.toggleModal(modal);\n\t};\n\tsaveList = items => {\n\t\tthis.setState({\n\t\t\tcounterList: items\n\t\t});\n\t};\n\n\tcaptureImage = () => {\n\t\tlet element = document.getElementById(\"capture\");\n\t\thtml2canvas(element).then(canvas => {\n\t\t\tlet imgData = canvas.toDataURL(\"image/jpeg\");\n\t\t\tthis.setState({\n\t\t\t\timgData: imgData\n\t\t\t});\n\t\t});\n\t};\n\n\trender() {\n\t\tlet size = {\n\t\t\twidth: this.state.gridWidth,\n\t\t\theight: this.state.gridHeight,\n\t\t\tbackgroundSize: this.state.gridSize\n\t\t};\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Navbar\n\t\t\t\t\tsetSize={this.setSize}\n\t\t\t\t\trequest={this.showRequestModal}\n\t\t\t\t\thelp={this.showHelpModal}\n\t\t\t\t\tcaptureImage={this.captureImage}\n\t\t\t\t/>\n\t\t\t\t<Modal\n\t\t\t\t\tshow={this.props.grid.modal.active}\n\t\t\t\t\thandleClose={this.hideModal}\n\t\t\t\t\ttitle={this.props.grid.modal.title}\n\t\t\t\t\ttype={this.props.grid.modal.type}\n\t\t\t\t\tcomponents={this.state.counterList}\n\t\t\t\t\tcaptureImage={this.state.imgData}\n\t\t\t\t\tname={this.props.auth.user.name}\n\t\t\t\t\temail={this.props.auth.user.email}\n\t\t\t\t/>\n\t\t\t\t<div className=\"builder-container\">\n\t\t\t\t\t<img\n\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\tclassName=\"container-background\"\n\t\t\t\t\t\tsrc=\"images/background.jpg\"\n\t\t\t\t\t/>\n\t\t\t\t\t<a\n\t\t\t\t\t\tonClick={this.onLogoutClick}\n\t\t\t\t\t\tclassName=\"logout-button \"\n\t\t\t\t\t\thref=\"\"\n\t\t\t\t\t>\n\t\t\t\t\t\tLogout\n\t\t\t\t\t</a>\n\t\t\t\t\t<ObjectList\n\t\t\t\t\t\tsaveLocation={this.saveLocation}\n\t\t\t\t\t\titemIsDragging={this.itemIsDragging}\n\t\t\t\t\t\tsaveItems={this.saveItems}\n\t\t\t\t\t\titemIsDropped={this.itemIsDropped}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<div\n\t\t\t\t\t\tid=\"capture\"\n\t\t\t\t\t\tclassName=\"grid-container\"\n\t\t\t\t\t\tref=\"gridContainer\"\n\t\t\t\t\t\t//onDrop={e => this.onDrop(e, \"complete\")}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"width-distance\">\n\t\t\t\t\t\t\t{this.props.grid.width} ft\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"grid-box\" ref=\"gridBox\" style={size}>\n\t\t\t\t\t\t\t<div className=\"height-distance\">\n\t\t\t\t\t\t\t\t{this.props.grid.height} ft\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"grid\"\n\t\t\t\t\t\t\t\tstyle={size}\n\t\t\t\t\t\t\t\tonDragOver={e => this.onDragOver(e)}\n\t\t\t\t\t\t\t\tonDrop={e => this.onDrop(e)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{this.state.addedComponents.map((items, id) => {\n\t\t\t\t\t\t\t\t\tlet num = this.state.addedComponents.length;\n\t\t\t\t\t\t\t\t\tlet name = this.state.addedComponents.name;\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<GridObjectItem\n\t\t\t\t\t\t\t\t\t\t\tkey={items.pieceId}\n\t\t\t\t\t\t\t\t\t\t\tpieceId={items.pieceId}\n\t\t\t\t\t\t\t\t\t\t\timg={items.img}\n\t\t\t\t\t\t\t\t\t\t\twidth={items.width}\n\t\t\t\t\t\t\t\t\t\t\theight={items.length}\n\t\t\t\t\t\t\t\t\t\t\tlocation={items.location}\n\t\t\t\t\t\t\t\t\t\t\tonDragStart={this.onDragStart}\n\t\t\t\t\t\t\t\t\t\t\tgridWidth={this.state.gridWidth}\n\t\t\t\t\t\t\t\t\t\t\tgridHeight={this.state.gridHeight}\n\t\t\t\t\t\t\t\t\t\t\tsaveGrid={this.saveGrid}\n\t\t\t\t\t\t\t\t\t\t\txLocation={this.state.componentX}\n\t\t\t\t\t\t\t\t\t\t\tyLocation={this.state.componentY}\n\t\t\t\t\t\t\t\t\t\t\trotate={items.rotation}\n\t\t\t\t\t\t\t\t\t\t\tscale={this.state.scale}\n\t\t\t\t\t\t\t\t\t\t\tsaveActiveItem={this.saveActiveItem}\n\t\t\t\t\t\t\t\t\t\t\tcurrentlyActive={\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.activeItem\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tdeleteComponent={\n\t\t\t\t\t\t\t\t\t\t\t\tthis.deleteComponent\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tgridX={this.state.gridX}\n\t\t\t\t\t\t\t\t\t\t\tgridY={this.state.gridY}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"grid-note\">\n\t\t\t\t\t\t\tEach Square is 10ft x 10ft\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ComponentCounter\n\t\t\t\t\t\taddedComponents={this.state.addedComponents}\n\t\t\t\t\t\tsaveList={this.saveList}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => ({\n\tauth: state.auth,\n\tgrid: state.grid\n});\n\nexport default connect(\n\tmapStateToProps,\n\t{ logoutUser, toggleModal }\n)(GridLayout);\n"]},"metadata":{},"sourceType":"module"}