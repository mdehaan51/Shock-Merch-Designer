{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING, SET_CURRENT_ADMIN } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"/api/users/register\", userData).then(res => history.push(\"/\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const token = res.data.token;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const loginAdmin = userData => dispatch => {\n  axios.post(\"/api/users/admin\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const token = res.data.token;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    console.log(decoded);\n    dispatch(setCurrentAdmin(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const resetPassword = userData => dispatch => {\n  axios.post(\"/api/mailer/reset\", userData).then(res => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: {\n        success: \"Success! Please check your email\"\n      }\n    }); //this.resetForm();\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\nexport const setCurrentAdmin = decoded => {\n  return {\n    type: SET_CURRENT_ADMIN,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = history => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/home/mdehaan51/highrev-projects/park-builder/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","SET_CURRENT_ADMIN","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","loginAdmin","console","log","setCurrentAdmin","resetPassword","success","setUserLoading","logoutUser","removeItem"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n\tGET_ERRORS,\n\tSET_CURRENT_USER,\n\tUSER_LOADING,\n\tSET_CURRENT_ADMIN\n} from \"./types\";\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n\taxios\n\t\t.post(\"/api/users/register\", userData)\n\t\t.then(res => history.push(\"/\")) // re-direct to login on successful register\n\t\t.catch(err =>\n\t\t\tdispatch({\n\t\t\t\ttype: GET_ERRORS,\n\t\t\t\tpayload: err.response.data\n\t\t\t})\n\t\t);\n};\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n\taxios\n\t\t.post(\"/api/users/login\", userData)\n\t\t.then(res => {\n\t\t\t// Save to localStorage\n\t\t\t// Set token to localStorage\n\t\t\tconst { token } = res.data;\n\t\t\tlocalStorage.setItem(\"jwtToken\", token);\n\t\t\t// Set token to Auth header\n\t\t\tsetAuthToken(token);\n\t\t\t// Decode token to get user data\n\t\t\tconst decoded = jwt_decode(token);\n\t\t\t// Set current user\n\t\t\tdispatch(setCurrentUser(decoded));\n\t\t})\n\t\t.catch(err =>\n\t\t\tdispatch({\n\t\t\t\ttype: GET_ERRORS,\n\t\t\t\tpayload: err.response.data\n\t\t\t})\n\t\t);\n};\n\nexport const loginAdmin = userData => dispatch => {\n\taxios\n\t\t.post(\"/api/users/admin\", userData)\n\t\t.then(res => {\n\t\t\t// Save to localStorage\n\t\t\t// Set token to localStorage\n\t\t\tconst { token } = res.data;\n\t\t\tlocalStorage.setItem(\"jwtToken\", token);\n\t\t\t// Set token to Auth header\n\t\t\tsetAuthToken(token);\n\t\t\t// Decode token to get user data\n\t\t\tconst decoded = jwt_decode(token);\n\t\t\t// Set current user\n\t\t\tconsole.log(decoded);\n\t\t\tdispatch(setCurrentAdmin(decoded));\n\t\t})\n\t\t.catch(err =>\n\t\t\tdispatch({\n\t\t\t\ttype: GET_ERRORS,\n\t\t\t\tpayload: err.response.data\n\t\t\t})\n\t\t);\n};\n\nexport const resetPassword = userData => dispatch => {\n\taxios\n\t\t.post(\"/api/mailer/reset\", userData)\n\t\t.then(res => {\n\t\t\tdispatch({\n\t\t\t\ttype: GET_ERRORS,\n\t\t\t\tpayload: { success: \"Success! Please check your email\" }\n\t\t\t});\n\t\t\t//this.resetForm();\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch({\n\t\t\t\ttype: GET_ERRORS,\n\t\t\t\tpayload: err.response.data\n\t\t\t});\n\t\t});\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n\treturn {\n\t\ttype: SET_CURRENT_USER,\n\t\tpayload: decoded\n\t};\n};\n\nexport const setCurrentAdmin = decoded => {\n\treturn {\n\t\ttype: SET_CURRENT_ADMIN,\n\t\tpayload: decoded\n\t};\n};\n// User loading\nexport const setUserLoading = () => {\n\treturn {\n\t\ttype: USER_LOADING\n\t};\n};\n// Log user out\nexport const logoutUser = history => dispatch => {\n\t// Remove token from local storage\n\tlocalStorage.removeItem(\"jwtToken\");\n\t// Remove auth header for future requests\n\tsetAuthToken(false);\n\t// Set current user to empty object {} which will set isAuthenticated to false\n\tdispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}