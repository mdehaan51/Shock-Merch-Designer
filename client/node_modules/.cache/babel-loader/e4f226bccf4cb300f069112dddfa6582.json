{"ast":null,"code":"import _objectSpread from \"/home/mdehaan51/highrev-projects/merch-designer/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/mdehaan51/highrev-projects/merch-designer/client/src/components/DrawingComponents/TextElement.js\";\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport { Stage, Layer, Text, Transformer } from \"react-konva\";\n\nconst TextElement = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange,\n  text,\n  style,\n  textProps,\n  id,\n  x,\n  y\n}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(Text, Object.assign({\n    text: text,\n    onClick: onSelect,\n    ref: shapeRef\n  }, textProps.style, {\n    rotation: rotation //fontSize=\"12px\"\n    //fontWeight=\"200\"\n    //lineHeight=\"12px\"\n    //fontFamily=\"Anton\"\n    ,\n    draggable: true,\n    onDragEnd: e => {\n      onChange(_objectSpread({}, textProps, {\n        x: e.target.x(),\n        y: e.target.y()\n      }));\n    },\n    onTransformEnd: e => {\n      // transformer is changing scale\n      const node = shapeRef.current;\n      const scaleX = node.scaleX();\n      const scaleY = node.scaleY();\n      console.log(node); // we will reset it back\n\n      node.scaleX(1);\n      node.scaleY(1);\n      onChange(_objectSpread({}, textProps, {\n        x: node.x(),\n        y: node.y(),\n        rotation: node.rotation(),\n        width: node.width() * scaleX,\n        height: node.height() * scaleY\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  })), isSelected && React.createElement(Transformer, {\n    ref: trRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }));\n};\n\nexport default TextElement;","map":{"version":3,"sources":["/home/mdehaan51/highrev-projects/merch-designer/client/src/components/DrawingComponents/TextElement.js"],"names":["React","Component","render","Stage","Layer","Text","Transformer","TextElement","shapeProps","isSelected","onSelect","onChange","text","style","textProps","id","x","y","shapeRef","useRef","trRef","useEffect","current","setNode","getLayer","batchDraw","rotation","e","target","node","scaleX","scaleY","console","log","width","height"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,WAA7B,QAAgD,aAAhD;;AAEA,MAAMC,WAAW,GAAG,CAAC;AACpBC,EAAAA,UADoB;AAEpBC,EAAAA,UAFoB;AAGpBC,EAAAA,QAHoB;AAIpBC,EAAAA,QAJoB;AAKpBC,EAAAA,IALoB;AAMpBC,EAAAA,KANoB;AAOpBC,EAAAA,SAPoB;AAQpBC,EAAAA,EARoB;AASpBC,EAAAA,CAToB;AAUpBC,EAAAA;AAVoB,CAAD,KAWd;AACL,QAAMC,QAAQ,GAAGlB,KAAK,CAACmB,MAAN,EAAjB;AACA,QAAMC,KAAK,GAAGpB,KAAK,CAACmB,MAAN,EAAd;AAEAnB,EAAAA,KAAK,CAACqB,SAAN,CAAgB,MAAM;AACrB,QAAIZ,UAAJ,EAAgB;AACf;AACAW,MAAAA,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBL,QAAQ,CAACI,OAA/B;AACAF,MAAAA,KAAK,CAACE,OAAN,CAAcE,QAAd,GAAyBC,SAAzB;AACA;AACD,GAND,EAMG,CAAChB,UAAD,CANH;AAQA,SACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,IAAD;AACC,IAAA,IAAI,EAAEG,IADP;AAEC,IAAA,OAAO,EAAEF,QAFV;AAGC,IAAA,GAAG,EAAEQ;AAHN,KAIKJ,SAAS,CAACD,KAJf;AAKC,IAAA,QAAQ,EAAEa,QALX,CAMC;AACA;AACA;AACA;AATD;AAWC,IAAA,SAAS,MAXV;AAYC,IAAA,SAAS,EAAEC,CAAC,IAAI;AACfhB,MAAAA,QAAQ,mBACJG,SADI;AAEPE,QAAAA,CAAC,EAAEW,CAAC,CAACC,MAAF,CAASZ,CAAT,EAFI;AAGPC,QAAAA,CAAC,EAAEU,CAAC,CAACC,MAAF,CAASX,CAAT;AAHI,SAAR;AAKA,KAlBF;AAmBC,IAAA,cAAc,EAAEU,CAAC,IAAI;AACpB;AACA,YAAME,IAAI,GAAGX,QAAQ,CAACI,OAAtB;AACA,YAAMQ,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACA,YAAMC,MAAM,GAAGF,IAAI,CAACE,MAAL,EAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EALoB,CAOpB;;AACAA,MAAAA,IAAI,CAACC,MAAL,CAAY,CAAZ;AACAD,MAAAA,IAAI,CAACE,MAAL,CAAY,CAAZ;AACApB,MAAAA,QAAQ,mBACJG,SADI;AAEPE,QAAAA,CAAC,EAAEa,IAAI,CAACb,CAAL,EAFI;AAGPC,QAAAA,CAAC,EAAEY,IAAI,CAACZ,CAAL,EAHI;AAIPS,QAAAA,QAAQ,EAAEG,IAAI,CAACH,QAAL,EAJH;AAKPQ,QAAAA,KAAK,EAAEL,IAAI,CAACK,KAAL,KAAeJ,MALf;AAMPK,QAAAA,MAAM,EAAEN,IAAI,CAACM,MAAL,KAAgBJ;AANjB,SAAR;AAQA,KArCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,EAwCEtB,UAAU,IAAI,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAEW,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxChB,CADD;AA4CA,CAnED;;AAqEA,eAAeb,WAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport { Stage, Layer, Text, Transformer } from \"react-konva\";\n\nconst TextElement = ({\n\tshapeProps,\n\tisSelected,\n\tonSelect,\n\tonChange,\n\ttext,\n\tstyle,\n\ttextProps,\n\tid,\n\tx,\n\ty\n}) => {\n\tconst shapeRef = React.useRef();\n\tconst trRef = React.useRef();\n\n\tReact.useEffect(() => {\n\t\tif (isSelected) {\n\t\t\t// we need to attach transformer manually\n\t\t\ttrRef.current.setNode(shapeRef.current);\n\t\t\ttrRef.current.getLayer().batchDraw();\n\t\t}\n\t}, [isSelected]);\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Text\n\t\t\t\ttext={text}\n\t\t\t\tonClick={onSelect}\n\t\t\t\tref={shapeRef}\n\t\t\t\t{...textProps.style}\n\t\t\t\trotation={rotation}\n\t\t\t\t//fontSize=\"12px\"\n\t\t\t\t//fontWeight=\"200\"\n\t\t\t\t//lineHeight=\"12px\"\n\t\t\t\t//fontFamily=\"Anton\"\n\n\t\t\t\tdraggable\n\t\t\t\tonDragEnd={e => {\n\t\t\t\t\tonChange({\n\t\t\t\t\t\t...textProps,\n\t\t\t\t\t\tx: e.target.x(),\n\t\t\t\t\t\ty: e.target.y()\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t\tonTransformEnd={e => {\n\t\t\t\t\t// transformer is changing scale\n\t\t\t\t\tconst node = shapeRef.current;\n\t\t\t\t\tconst scaleX = node.scaleX();\n\t\t\t\t\tconst scaleY = node.scaleY();\n\t\t\t\t\tconsole.log(node);\n\n\t\t\t\t\t// we will reset it back\n\t\t\t\t\tnode.scaleX(1);\n\t\t\t\t\tnode.scaleY(1);\n\t\t\t\t\tonChange({\n\t\t\t\t\t\t...textProps,\n\t\t\t\t\t\tx: node.x(),\n\t\t\t\t\t\ty: node.y(),\n\t\t\t\t\t\trotation: node.rotation(),\n\t\t\t\t\t\twidth: node.width() * scaleX,\n\t\t\t\t\t\theight: node.height() * scaleY\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t{isSelected && <Transformer ref={trRef} />}\n\t\t</React.Fragment>\n\t);\n};\n\nexport default TextElement;\n"]},"metadata":{},"sourceType":"module"}